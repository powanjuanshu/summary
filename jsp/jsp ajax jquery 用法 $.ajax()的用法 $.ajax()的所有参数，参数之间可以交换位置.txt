<%@ page language="java" contentType="text/html" pageEncoding="utf-8"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>页面</title>
<meta http-equiv="content" content="text/html;charset=utf-8">
<script type="text/javascript" src="jquery-1.7.1.js"></script>
<script type="text/javascript">
function sub(){
	$.ajax({//参数之间是可以交换位置,所有选项都是可选的
		async:false,//true为异步，false为同步，默认为异步，设置为异步，超时设置就没用了
		url:"getTemplateServlet",
		type:"post",//默认为get
		data:{//data为空时也要带空参数，即data:{}
			username:$("#t1").val(),
			content:$("#t2").val()
		},
		dataType:"json",//contentType为空时要带空参数，即dataType:""
		success:function(data,textStatus){
			alert(data);//打出来的是纯文本，[{'name':'jack','sex':'male','age':30},{'name':'rose','sex':'female','age':25},{'name':'lucy','sex':'male','age':20}]
			var jsonObject=eval(data);
			alert(jsonObject);//打出来的是三个json对象，[object Object],[object Object],[object Object],json对象数组
			alert(jsonObject[0].name);//打出来是第一个json对象的name值，为jack，json对象数组，下标从0开始
			alert(jsonObject[1].sex);//打出来是第二个json对象的sex值，为female
			alert(jsonObject.length);//打出json对象数组的长度，为3
		},
		cache:false,//默认为true，设置为 false将不会从浏览器缓存中加载请求信息。
		timeout:5000,
		error:function(){
			alert('超时');//此设置将覆盖全局设置
		},
		complete:function(){
			alert('不管成功还是超时，只要请求完成，必须做的事');
		},
		beforeSend:function(){
			alert('发送之前做的事');
		}
	});
}
</script>
</head>
<body>
<form action="" id="form1" method="post">
	<p>评论：</p>
	<p>姓名：<input type="text" name="t1" id="t1"/></p>
	<p>内容：<textarea name="t2" id="t2" rows="2" cols="20"></textarea></p>
	<p><input type="button" id="t3" value="提交" onclick="sub();"/></p>
</form>
<div class="comment">已有评论：</div>
<div id="resText"></div>
</body>
</html>
-----------------------------------------------------------
通过 HTTP 请求加载远程数据。

      jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。

      $.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该对象，但特殊情况下可用于手动终止请求。

      $.ajax() 只有一个参数：参数 key/value 对象，包含各配置及回调函数信息。详细参数选项见下。

      注意： 如果你指定了 dataType 选项，请确保服务器返回正确的 MIME 信息，(如 xml 返回 "text/xml")。错误的 MIME 类型可能导致不可预知的错误。见 Specifying the Data Type for AJAX Requests 。

      注意：如果dataType设置为"script"，那么所有的远程(不在同一域名下)的POST请求都将转化为GET请求。(因为将使用DOM的script标签来加载)

      jQuery 1.2 中，您可以跨域加载 JSON 数据，使用时需将数据类型设置为 JSONP。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。数据类型设置为 "jsonp" 时，jQuery 将自动调用回调函数。

      返回值：XMLHttpRequest

      参数：options (可选) : AJAX 请求设置。所有选项都是可选的。

      选项：
      async (Boolean) : (默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。

      beforeSend (Function) : 发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。Ajax 事件。 

 

 程序代码

function (XMLHttpRequest) {
    this; // 调用本次AJAX请求时传递的options参数
} 


      cache (Boolean) : (默认: true,dataType为script时默认为false) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。

      complete (Function) : 请求完成后回调函数 (请求成功或失败时均调用)。参数： XMLHttpRequest 对象和一个描述成功请求类型的字符串。Ajax 事件。 

 

 程序代码
function (XMLHttpRequest, textStatus) {
    this; // 调用本次AJAX请求时传递的options参数
}  


      contentType (String) : (默认: "application/x-www-form-urlencoded") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。

      data (Object,String) : 发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。

      dataFilter (Function) :给Ajax返回的原始数据的进行预处理的函数。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。 

 

 程序代码
function (data, type) {
    // 对Ajax返回的原始数据进行预处理
    return data // 返回处理后的数据
} 


      dataType (String) : 预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值： 

 
"xml": 返回 XML 文档，可用 jQuery 处理。

"html": 返回纯文本 HTML 信息；包含 script 元素。 

"script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了"cache"参数

"json": 返回 JSON 数据 。

"jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。

"text": 返回纯文本字符串



      error (Function) : (默认: 自动判断 (xml 或 html)) 请求失败时调用时间。参数：XMLHttpRequest 对象、错误信息、（可选）捕获的错误对象。Ajax 事件。 

 
程序代码
function (XMLHttpRequest, textStatus, errorThrown) {
    // 通常 textStatus 和 errorThrown 之中
    // 只有一个会包含信息
    this; // 调用本次AJAX请求时传递的options参数
}  


      global (Boolean) : (默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。

      ifModified (Boolean) : (默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。

      jsonp (String) : 在一个jsonp请求中重写回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。

      password (String) : 用于响应HTTP访问认证请求的密码。

      processData (Boolean) : (默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。

      scriptCharset (String) : 只有当请求时dataType为"jsonp"或"script"，并且type是"GET"才会用于强制修改charset。通常在本地和远程的内容编码不同时使用。

      success (Function) : 请求成功后回调函数。参数：服务器返回数据，数据格式。Ajax 事件。 

 
程序代码
function (data, textStatus) {
    // data 可能是 xmlDoc, jsonObj, html, text, 等等...
    this; // 调用本次AJAX请求时传递的options参数
} 


      timeout (Number) : 设置请求超时时间（毫秒）。此设置将覆盖全局设置。

      type (String) : (默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 Delete 也可以使用，但仅部分浏览器支持。

      url (String) : (默认: 当前页地址) 发送请求的地址。

      username (String) : 用于响应HTTP访问认证请求的用户名。

      示例：

      加载并执行一个 JS 文件。
      jQuery代码： 

 
程序代码
$.ajax({
  type: "GET",
  url: "test.js",
  dataType: "script"
});   


      保存数据到服务器，成功时显示信息。
      jQuery代码： 

 
程序代码
$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
}); 


      装入一个 HTML 网页最新版本。
      jQuery代码： 

 
程序代码
$.ajax({
  url: "test.html",
  cache: false,
  success: function(html){
    $("#results").append(html);
  }
}); 


      同步加载数据。发送请求时锁住浏览器。需要锁定用户交互操作时使用同步方式。
      jQuery代码： 

 
程序代码
var html = $.ajax({
  url: "some.php",
  async: false
}).responseText; 


      发送 XML 数据至服务器。设置 processData 选项为 false，防止自动转换数据格式。
      jQuery代码： 

 
程序代码
var xmlDocument = [create xml document];
$.ajax({
   url: "page.php",
   processData: false,
   data: xmlDocument,
   success: handleResponse
}); 
 
 

2 . jQuery帮助之Ajax请求（二）jQuery.get(url,[data],[callback]

 


 jQuery.get(url,[data],[callback])

      通过远程 HTTP GET 请求载入信息。

      这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。

      返回值：XMLHttpRequest

      参数：
      url (String) : 待载入页面的URL地址。
      data (Map) : (可选)待发送 Key/value 参数。
      callback (Function) : (可选)载入成功时回调函数。

      示例：
      请求 test.php 网页，忽略返回值。
      jQuery代码： 

 
程序代码
$.get("test.php"); 


      请求 test.php 网页，传送2个参数，忽略返回值。
      jQuery代码： 

 
程序代码
$.get("test.php", { name: "John", time: "2pm" } );  


      显示 test.php 返回值(HTML 或 XML，取决于返回值)。
      jQuery代码： 

 
程序代码
$.get("test.php", function(data){
  alert("Data Loaded: " + data);
}); 


      显示 test.cgi 返回值(HTML 或 XML，取决于返回值)，添加一组请求参数。
      jQuery代码： 

 
程序代码
$.get("test.cgi", { name: "John", time: "2pm" },
  function(data){
    alert("Data Loaded: " + data);
  }); 
 
 


3 . jQuery帮助之Ajax请求（三）jQuery.getJSON

 


 jQuery.getJSON(url,[data],[callback])

      通过 HTTP GET 请求载入 JSON 数据。

      在 jQuery 1.2 中，您可以通过使用JSONP 形式的回调函数来加载其他网域的JSON数据，如 "myurl?callback=?"。jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。 

      注意：此行以后的代码将在这个回调函数执行前执行。

      返回值：XMLHttpRequest

      参数：
      url (String) : 发送请求地址。
      data (Map) : (可选)待发送 Key/value 参数。
      callback (Function) : (可选)载入成功时回调函数。

      示例：
      从 Flickr JSONP API 载入 4 张最新的关于猫的图片。
      HTML 代码： 

 
程序代码
<div id="images"></div> 


      jQuery代码： 

 
程序代码
$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?tags=cat&tagmode=any&format=json&jsoncallback=?",
function(data){
  $.each(data.items, function(i,item){
    $("<img/>").attr("src", 
item.media.m).appendTo("#images");
    if ( i == 3 ) return false;
  });
}); 


      从 test.js 载入 JSON 数据并显示 JSON 数据中一个 name 字段数据。
      jQuery代码： 

 
程序代码
$.getJSON("test.js", function(json){
  alert("JSON Data: " + json.users[3].name);
}); 


      从 test.js 载入 JSON 数据，附加参数，显示 JSON 数据中一个 name 字段数据。
      jQuery代码： 

 
程序代码
$.getJSON("test.js", { name: "John", time: "2pm" }, function(json){
  alert("JSON Data: " + json.users[3].name);
}); 
 

 


4 . jQuery帮助之Ajax请求（四）jQuery.getScript(url,[callback])

 


  jQuery.getScript(url,[callback])

      通过 HTTP GET 请求载入并执行一个 JavaScript 文件。

      jQuery 1.2 版本之前，getScript 只能调用同域 JS 文件。 1.2中，您可以跨域调用 JavaScript 文件。注意：Safari 2 或更早的版本不能在全局作用域中同步执行脚本。如果通过 getScript 加入脚本，请加入延时函数。

      返回值：XMLHttpRequest

      参数：
      url (String) : 待载入 JS 文件地址。
      callback (Function) : (可选)成功载入后回调函数。

      示例：
      载入 jQuery 官方颜色动画插件 成功后绑定颜色变化动画。
      HTML 代码： 

 
程序代码
<button id="go">? Run</button>
<div class="block"></div> 


      jQuery代码： 

 
程序代码
jQuery.getScript("http://dev.jquery.com/view/trunk/plugins/color/jquery.color.js", 
function(){
  $("#go").click(function(){
    $(".block").animate( { backgroundColor: 'pink' }, 1000)
      .animate( { backgroundColor: 'blue' }, 1000);
  });
}); 


      加载并执行 test.js。
      jQuery代码： 

 
程序代码
$.getScript("test.js"); 


      加载并执行 test.js ，成功后显示信息。
      jQuery代码： 

 
程序代码
$.getScript("test.js", function(){
  alert("Script loaded and executed.");
}); 
 

 

5 . jQuery帮助之Ajax请求（五）jQuery.post

 


 jQuery.post( url, [data], [callback], [type] )

      通过远程 HTTP POST 请求载入信息，使用POST方式来进行异步请求。

      这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。

      返回值：XMLHttpRequest

      参数：
      url (String) : 发送请求的URL地址。
      data (Map) : (可选)要发送给服务器的数据，以 Key/value 的键值对形式表示。
      callback (Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。
       type : (String) : (可选)官方的说明是：Type of data to be sent。其实应该为客户端请求的类型(JSON,XML,等等)

      示例：
      Ajax.aspx：

 程序代码
Response.ContentType = "application/json";
Response.Write("{result: '" + Request["Name"] + ",你好！(这消息来自服务器)'}");
jQuery 

      代码：

 程序代码
$.post("Ajax.aspx", { Action: "post", Name: "lulu" },
        function (data, textStatus){
            // data 可以是 xmlDoc, jsonObj, html, text, 等等.
            //this; // 这个Ajax请求的选项配置信息，请参考jQuery.get()说到的this
            alert(data.result);
        }, "json");


这里设置了请求的格式为"json"：


如果你设置了请求的格式为"json"，此时你没有设置Response回来的ContentType 为：Response.ContentType = "application/json"; 那么你将无法捕捉到返回的数据。 

注意一下，alert(data.result); 由于设置了Accept报头为“json”，这里返回的data就是一个对象，并不需要用eval()来转换为对象。

 

 

6 . jQuery帮助之Ajax请求（六）load(url,[data],[callback])

 


 load(url,[data],[callback])

      载入远程 HTML 文件代码并插入至 DOM 中。

      默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 "url #some > selector"。请查看示例。

      返回值：jQuery

      参数：
      url (String) : 待装入 HTML 网页网址。
      data (Map) : (可选)发送至服务器的 key/value 数据。
      callback (Callback) : (可选) 载入成功时回调函数。

      示例：
      加载文章侧边栏导航部分至一个无序列表。
      HTML 代码:
       

 程序代码
<b>jQuery Links:</b>
<ul id="links"></ul> 


      jQuery 代码:
       

 程序代码
$("#links").load("/Main_Page #p-Getting-Started li"); 


      加载 feeds.html 文件内容。
      jQuery 代码:
       

 程序代码
$("#feeds").load("feeds.html");  


      同上，但是以 POST 形式发送附加参数并在成功时显示信息。
       jQuery 代码: 
       

 程序代码
$("#feeds").load("feeds.php", {limit: 25}, function(){
   alert("The last 25 entries in the feed have been loaded");
}); 
 

 

7 . jQuery帮助之Ajax其它（一）jQuery.ajaxSetup(options)

 


引自:http://www.flywe.net/article/javascript/%20jQuery_ajaxSetup.html


 jQuery.ajaxSetup(options)

      设置全局 AJAX 默认选项。

      参数见 '$.ajax' 说明。

      返回值：jQuery

      参数：
      options (可选) :  选项设置。所有设置项均为可选设置。

      示例：
      设置 AJAX 请求默认地址为 "/xmlhttp/"，禁止触发全局 AJAX 事件，用 POST 代替默认 GET 方法。其后的 AJAX 请求不再设置任何选项参数。
      jQuery 代码:
       

 程序代码
$.ajaxSetup({
  url: "/xmlhttp/",
  global: false,
  type: "POST"
});
$.ajax({ data: myData }); 
 

 

8 . jQuery帮助之Ajax其它（二）serialize()

 


serialize()

      序列表表格内容为字符串。

      返回值：jQuery

      示例：
      序列表表格内容为字符串，用于 Ajax 请求。
      HTML 代码:
       

 程序代码
<p id="results"><b>Results: </b> </p>
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select><br/>
  <input type="checkbox" name="check" value="check1"/> check1
  <input type="checkbox" name="check" value="check2" 
checked="checked"/> check2
  <input type="radio" name="radio" value="radio1" 
checked="checked"/> radio1
  <input type="radio" name="radio" value="radio2"/> radio2
</form> 


      jQuery 代码:
       

 程序代码
$("#results").append( "<tt>" + $("form").serialize() + "</tt>" ); 


9 . jQuery帮助之Ajax其它（三）serializeArray()

 


serializeArray()

      序列化表格元素 (类似 '.serialize()' 方法) 返回 JSON 数据结构数据。

      返回值：jQuery

      示例：
      取得表单内容并插入到网页中。
      HTML 代码:
       

 程序代码
<p id="results"><b>Results:</b> </p>
<form>
  <select name="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select><br/>
  <input type="checkbox" name="check" value="check1"/> check1
  <input type="checkbox" name="check" value="check2" 
checked="checked"/> check2
  <input type="radio" name="radio" value="radio1" 
checked="checked"/> radio1
  <input type="radio" name="radio" value="radio2"/> radio2
</form> 


      jQuery 代码:
       

 程序代码
var fields = $("select, :radio").serializeArray();
jQuery.each( fields, function(i, field){
  $("#results").append(field.value + " ");
});



# Redis configuration file example
# Note on units: when memory size is needed, it is possible to specifiy
# it in the usual form of 1k 5GB 4M and so forth:
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
# units are case insensitive so 1GB 1Gb 1gB are all the same.
# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
daemonize no 
018
Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.
pidfile /var/run/redis.pid
当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
# Accept connections on the specified port, default is 6379.
# If port 0 is specified Redis will not listen on a TCP socket.
port 6379
指定Redis监听端口，默认端口为6379
# If you want you can bind a single interface, if the bind option is not
# specified all the interfaces will listen for incoming connections.
# bind 127.0.0.1
绑定的主机地址
# Specify the path for the unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.  www.2cto.com  
# unixsocket /tmp/redis.sock
# unixsocketperm 755
# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0
当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
# Set server verbosity to 'debug'
# it can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel verbose
指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
# Specify the log file name. Also 'stdout' can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile stdout
日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# syslog-enabled no
# Specify the syslog identity.
# syslog-ident redis
# Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.
# syslog-facility local0
# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
databases 16  www.2cto.com  
设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
################################ SNAPSHOTTING  #################################
# Save the DB on disk:
#   save <seconds> <changes>
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#   Note: you can disable saving at all commenting all the "save" lines.
save 900 1
save 300 10
save 60 10000
分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
096
rdbcompression yes
097
指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
098
# The filename where to dump the DB
099
dbfilename dump.rdb
100
指定本地数据库文件名，默认值为dump.rdb
101
# The working directory.
102
#
103
# The DB will be written inside this directory, with the filename specified
104
# above using the 'dbfilename' configuration directive.
105
#
106
# Also the Append Only File will be created inside this directory.
107
#
108
# Note that you must specify a directory here, not a file name.
109
dir ./
110
指定本地数据库存放目录
111
################################# REPLICATION #################################
112
113
# Master-Slave replication. Use slaveof to make a Redis instance a copy of
114
# another Redis server. Note that the configuration is local to the slave
115
# so for example it is possible to configure the slave to save the DB with a
116
# different interval, or to listen to another port, and so on.  www.2cto.com  
117
#
118
# slaveof <masterip> <masterport>
119
slaveof <masterip> <masterport> 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
120
# If the master is password protected (using the "requirepass" configuration
121
# directive below) it is possible to tell the slave to authenticate before
122
# starting the replication synchronization process, otherwise the master will
123
# refuse the slave request.
124
#
125
# masterauth <master-password>
126
masterauth <master-password> 当master服务设置了密码保护时，slav服务连接master的密码
127
# When a slave lost the connection with the master, or when the replication
128
# is still in progress, the slave can act in two different ways:
129
#
130
# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
131
#    still reply to client requests, possibly with out of data data, or the
132
#    data set may just be empty if this is the first synchronization.
133
#
134
# 2) if slave-serve-stale data is set to 'no' the slave will reply with
135
#    an error "SYNC with master in progress" to all the kind of commands
136
#    but to INFO and SLAVEOF.
137
#
138
slave-serve-stale-data yes
139
 
140
# Slaves send PINGs to server in a predefined interval. It's possible to change
141
# this interval with the repl_ping_slave_period option. The default value is 10
142
# seconds.  www.2cto.com  
143
#
144
# repl-ping-slave-period 10
145
 
146
# The following option sets a timeout for both Bulk transfer I/O timeout and
147
# master data or ping response timeout. The default value is 60 seconds.
148
#
149
# It is important to make sure that this value is greater than the value
150
# specified for repl-ping-slave-period otherwise a timeout will be detected
151
# every time there is low traffic between the master and the slave.
152
#
153
# repl-timeout 60
154
 
155
################################## SECURITY ###################################
156
 
157
# Require clients to issue AUTH <PASSWORD> before processing any other
158
# commands.  This might be useful in environments in which you do not trust
159
# others with access to the host running redis-server.
160
#
161
# This should stay commented out for backward compatibility and because most
162
# people do not need auth (e.g. they run their own servers).
163
#
164
# Warning: since Redis is pretty fast an outside user can try up to
165
# 150k passwords per second against a good box. This means that you should
166
# use a very strong password otherwise it will be very easy to break.
167
#
168
# requirepass foobared
169
 requirepass foobared 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
170
# Command renaming.
171
#
172
# It is possilbe to change the name of dangerous commands in a shared
173
# environment. For instance the CONFIG command may be renamed into something
174
# of hard to guess so that it will be still available for internal-use
175
# tools but not available for general clients.
176
#
177
# Example:
178
#
179
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
180
#
181
# It is also possilbe to completely kill a command renaming it into
182
# an empty string:
183
#
184
# rename-command CONFIG ""
185
 
186
################################### LIMITS ####################################
187
 
188
# Set the max number of connected clients at the same time. By default there
189
# is no limit, and it's up to the number of file descriptors the Redis process
190
# is able to open. The special value '0' means no limits.
191
# Once the limit is reached Redis will close all the new connections sending
192
# an error 'max number of clients reached'.  www.2cto.com  
193
#
194
# maxclients 128
195
maxclients 128 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
196
# Don't use more memory than the specified amount of bytes.
197
# When the memory limit is reached Redis will try to remove keys with an
198
# EXPIRE set. It will try to start freeing keys that are going to expire
199
# in little time and preserve keys with a longer time to live.
200
# Redis will also try to remove objects from free lists if possible.
201
#
202
# If all this fails, Redis will start to reply with errors to commands
203
# that will use more memory, like SET, LPUSH, and so on, and will continue
204
# to reply to most read-only commands like GET.
205
#
206
# WARNING: maxmemory can be a good idea mainly if you want to use Redis as a
207
# 'state' server or cache, not as a real DB. When Redis is used as a real
208
# database the memory usage will grow over the weeks, it will be obvious if
209
# it is going to use too much memory in the long run, and you'll have the time
210
# to upgrade. With maxmemory after the limit is reached you'll start to get
211
# errors for write operations, and this may even lead to DB inconsistency.
212
#
213
# maxmemory <bytes>
214
 maxmemory <bytes>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
215
# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
216
# is reached? You can select among five behavior:
217
#
218
# volatile-lru -> remove the key with an expire set using an LRU algorithm
219
# allkeys-lru -> remove any key accordingly to the LRU algorithm
220
# volatile-random -> remove a random key with an expire set
221
# allkeys->random -> remove a random key, any key
222
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)
223
# noeviction -> don't expire at all, just return an error on write operations
224
#
225
# Note: with all the kind of policies, Redis will return an error on write
226
#       operations, when there are not suitable keys for eviction.
227
#
228
#       At the date of writing this commands are: set setnx setex append
229
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
230
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
231
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
232
#       getset mset msetnx exec sort  www.2cto.com  
233
#
234
# The default is:
235
#
236
# maxmemory-policy volatile-lru
237
 
238
# LRU and minimal TTL algorithms are not precise algorithms but approximated
239
# algorithms (in order to save memory), so you can select as well the sample
240
# size to check. For instance for default Redis will check three keys and
241
# pick the one that was used less recently, you can change the sample size
242
# using the following configuration directive.
243
#
244
# maxmemory-samples 3
245
 
246
############################## APPEND ONLY MODE ###############################
247
 
248
# By default Redis asynchronously dumps the dataset on disk. If you can live
249
# with the idea that the latest records will be lost if something like a crash
250
# happens this is the preferred way to run Redis. If instead you care a lot
251
# about your data and don't want to that a single record can get lost you should
252
# enable the append only mode: when this mode is enabled Redis will append
253
# every write operation received in the file appendonly.aof. This file will
254
# be read on startup in order to rebuild the full dataset in memory.
255
#
256
# Note that you can have both the async dumps and the append only file if you
257
# like (you have to comment the "save" statements above to disable the dumps).
258
# Still if append only mode is enabled Redis will load the data from the
259
# log file at startup ignoring the dump.rdb file.
260
#
261
# IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append
262
# log file in background when it gets too big.
263
 
264
appendonly no
265
appendonly no指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
266
# The name of the append only file (default: "appendonly.aof")
267
# appendfilename appendonly.aof
268
 appendfilename appendonly.aof指定更新日志文件名，默认为appendonly.aof
269
# The fsync() call tells the Operating System to actually write data on disk
270
# instead to wait for more data in the output buffer. Some OS will really flush
271
# data on disk, some other OS will just try to do it ASAP.
272
#
273
# Redis supports three different modes:
274
#
275
# no: don't fsync, just let the OS flush the data when it wants. Faster.
276
# always: fsync after every write to the append only log . Slow, Safest.
277
# everysec: fsync only if one second passed since the last fsync. Compromise.
278
#
279
# The default is "everysec" that's usually the right compromise between
280
# speed and data safety. It's up to you to understand if you can relax this to
281
# "no" that will will let the operating system flush the output buffer when
282
# it wants, for better performances (but if you can live with the idea of
283
# some data loss consider the default persistence mode that's snapshotting),
284
# or on the contrary, use "always" that's very slow but a bit safer than
285
# everysec.  www.2cto.com  
286
#
287
# If unsure, use "everysec".
288
 
289
# appendfsync always
290
appendfsync everysec
291
# appendfsync no
292
指定更新日志条件，共有3个可选值：
293
no：表示等操作系统进行数据缓存同步到磁盘（快）
294
always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）
295
everysec：表示每秒同步一次（折衷，默认值）
296
# When the AOF fsync policy is set to always or everysec, and a background
297
# saving process (a background save or AOF log background rewriting) is
298
# performing a lot of I/O against the disk, in some Linux configurations
299
# Redis may block too long on the fsync() call. Note that there is no fix for
300
# this currently, as even performing fsync in a different thread will block
301
# our synchronous write(2) call.
302
#
303
# In order to mitigate this problem it's possible to use the following option
304
# that will prevent fsync() from being called in the main process while a
305
# BGSAVE or BGREWRITEAOF is in progress.
306
#
307
# This means that while another child is saving the durability of Redis is
308
# the same as "appendfsync none", that in pratical terms means that it is
309
# possible to lost up to 30 seconds of log in the worst scenario (with the
310
# default Linux settings).
311
#
312
# If you have latency problems turn this to "yes". Otherwise leave it as
313
# "no" that is the safest pick from the point of view of durability.
314
no-appendfsync-on-rewrite no
315
 
316
# Automatic rewrite of the append only file.
317
# Redis is able to automatically rewrite the log file implicitly calling
318
# BGREWRITEAOF when the AOF log size will growth by the specified percentage.
319
#
320
# This is how it works: Redis remembers the size of the AOF file after the
321
# latest rewrite (or if no rewrite happened since the restart, the size of
322
# the AOF at startup is used).
323
#
324
# This base size is compared to the current size. If the current size is
325
# bigger than the specified percentage, the rewrite is triggered. Also
326
# you need to specify a minimal size for the AOF file to be rewritten, this
327
# is useful to avoid rewriting the AOF file even if the percentage increase
328
# is reached but it is still pretty small.
329
#
330
# Specify a precentage of zero in order to disable the automatic AOF
331
# rewrite feature.  www.2cto.com  
332
 
333
auto-aof-rewrite-percentage 100
334
auto-aof-rewrite-min-size 64mb
335
 
336
################################## SLOW LOG ###################################
337
 
338
# The Redis Slow Log is a system to log queries that exceeded a specified
339
# execution time. The execution time does not include the I/O operations
340
# like talking with the client, sending the reply and so forth,
341
# but just the time needed to actually execute the command (this is the only
342
# stage of command execution where the thread is blocked and can not serve
343
# other requests in the meantime).
344
#
345
# You can configure the slow log with two parameters: one tells Redis
346
# what is the execution time, in microseconds, to exceed in order for the
347
# command to get logged, and the other parameter is the length of the
348
# slow log. When a new command is logged the oldest one is removed from the
349
# queue of logged commands.
350
 
351
# The following time is expressed in microseconds, so 1000000 is equivalent
352
# to one second. Note that a negative number disables the slow log, while
353
# a value of zero forces the logging of every command.
354
slowlog-log-slower-than 10000
355
 
356
# There is no limit to this length. Just be aware that it will consume memory.
357
# You can reclaim memory used by the slow log with SLOWLOG RESET.
358
slowlog-max-len 1024
359
 
360
################################ VIRTUAL MEMORY ###############################
361
 
362
### WARNING! Virtual Memory is deprecated in Redis 2.4
363
### The use of Virtual Memory is strongly discouraged.
364
 
365
### WARNING! Virtual Memory is deprecated in Redis 2.4
366
### The use of Virtual Memory is strongly discouraged.
367
 
368
# Virtual Memory allows Redis to work with datasets bigger than the actual
369
# amount of RAM needed to hold the whole dataset in memory.
370
# In order to do so very used keys are taken in memory while the other keys
371
# are swapped into a swap file, similarly to what operating systems do
372
# with memory pages.  www.2cto.com  
373
#
374
# To enable VM just set 'vm-enabled' to yes, and set the following three
375
# VM parameters accordingly to your needs.
376
 
377
vm-enabled no
378
指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
379
# vm-enabled yes
380
 
381
# This is the path of the Redis swap file. As you can guess, swap files
382
# can't be shared by different Redis instances, so make sure to use a swap
383
# file for every redis process you are running. Redis will complain if the
384
# swap file is already in use.
385
#
386
# The best kind of storage for the Redis swap file (that's accessed at random)
387
# is a Solid State Disk (SSD).
388
#
389
# *** WARNING *** if you are using a shared hosting the default of putting
390
# the swap file under /tmp is not secure. Create a dir with access granted
391
# only to Redis user and configure Redis to create the swap file there.
392
vm-swap-file /tmp/redis.swap
393
虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
394
# vm-max-memory configures the VM to use at max the specified amount of
395
# RAM. Everything that deos not fit will be swapped on disk *if* possible, that
396
# is, if there is still enough contiguous space in the swap file.
397
#
398
# With vm-max-memory 0 the system will swap everything it can. Not a good
399
# default, just specify the max amount of RAM you can in bytes, but it's
400
# better to leave some margin. For instance specify an amount of RAM
401
# that's more or less between 60 and 80% of your free RAM.
402
vm-max-memory 0  www.2cto.com  
403
将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
404
# Redis swap files is split into pages. An object can be saved using multiple
405
# contiguous pages, but pages can't be shared between different objects.
406
# So if your page is too big, small objects swapped out on disk will waste
407
# a lot of space. If you page is too small, there is less space in the swap
408
# file (assuming you configured the same number of total swap file pages).
409
#
410
# If you use a lot of small objects, use a page size of 64 or 32 bytes.
411
# If you use a lot of big objects, use a bigger page size.
412
# If unsure, use the default :)
413
vm-page-size 32
414
Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
415
# Number of total memory pages in the swap file.
416
# Given that the page table (a bitmap of free/used pages) is taken in memory,
417
# every 8 pages on disk will consume 1 byte of RAM.
418
#
419
# The total swap size is vm-page-size * vm-pages
420
#
421
# With the default of 32-bytes memory pages and 134217728 pages Redis will
422
# use a 4 GB swap file, that will use 16 MB of RAM for the page table.
423
#
424
# It's better to use the smallest acceptable value for your application,
425
# but the default is large in order to work in most conditions.
426
vm-pages 134217728
427
设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
428
# Max number of VM I/O threads running at the same time.
429
# This threads are used to read/write data from/to swap file, since they
430
# also encode and decode objects from disk to memory or the reverse, a bigger
431
# number of threads can help with big objects even if they can't help with
432
# I/O itself as the physical device may not be able to couple with many
433
# reads/writes operations at the same time.  www.2cto.com  
434
#
435
# The special value of 0 turn off threaded I/O and enables the blocking
436
# Virtual Memory implementation.
437
vm-max-threads 4
438
设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
439
############################### ADVANCED CONFIG ###############################
440
 
441
# Hashes are encoded in a special way (much more memory efficient) when they
442
# have at max a given numer of elements, and the biggest element does not
443
# exceed a given threshold. You can configure this limits with the following
444
# configuration directives.
445
hash-max-zipmap-entries 512
446
hash-max-zipmap-value 64
447
指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
448
# Similarly to hashes, small lists are also encoded in a special way in order
449
# to save a lot of space. The special representation is only used when
450
# you are under the following limits:
451
list-max-ziplist-entries 512
452
list-max-ziplist-value 64
453
 
454
# Sets have a special encoding in just one case: when a set is composed
455
# of just strings that happens to be integers in radix 10 in the range
456
# of 64 bit signed integers.
457
# The following configuration setting sets the limit in the size of the
458
# set in order to use this special memory saving encoding.
459
set-max-intset-entries 512  www.2cto.com  
# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into an hash table
# that is rhashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
# The default is to use this millisecond 10 times every second in order to
# active rehashing the main dictionaries, freeing memory when possible.
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply form time to time
# to queries with 2 milliseconds delay.
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
activerehashing yes  www.2cto.com 
################################## INCLUDES ###################################
# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all redis server but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
# include /path/to/local.conf
# include /path/to/other.conf
指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
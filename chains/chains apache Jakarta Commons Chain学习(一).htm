<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Jakarta Commons Chain学习(一) - Anvil的专栏 - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="原文：http://phil-xzh.javaeye.com/blog/321536使用Commons Chain作为程序开发人员，我们经常需要对一个实际上程序性的系统应用面向对象的方法。商业分析家和管理人员描述这样的系统时通常不使用类层次和序列图，而是使用流程图和工作流图表。但是不论如何，使用面向对象的方法解决这些问题时会带来更多的灵活性。面向对象的设计模式提供了有用的结构和行为来描述这种顺序的处理，比如模版方法（Template Method）[GoF]和责任链（Chain of Responsibil" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/default/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/x_yp/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
  <script type="text/javascript">
    var username = "x_yp";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/x_yp";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "warmsmellofcolitas";
</script>

<div id="body">
<div id="main">
<div class="main">
  <div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Repost"></span>
    <h3>
        <span class="link_title"><a href="/x_yp/article/details/6155075">
        Jakarta Commons Chain学习(一)
        </a></span>
    </h3>
</div>

        
    <div id="article_content" class="article_content">
<p><span style="font-size: large;"><strong>使用Commons Chain</strong>
</span></p>
<p>作为程序开发人员，我们经常需要对一个实际上程序性的系统应用面向对象的方法。商业分析家和管理人员描述这样的系统时通常不使用类层次和序列图，而是使用流程图和工作流图表。但是不论如何，使用面向对象的方法解决这些问题时会带来更多的灵活性。面向对象的设计模式提供了有用的结构和行为来描述这种顺序的处理，比如模版方法（Template Method）[GoF]和责任链（Chain of Responsibility）[GoF]。</p>
<p><span style="color: #ff6600;">Jakarta Commons的子项目Chain将上述两个模式组合成一个可复用的Java框架用于描述顺序的处理流程</span>
。这个在Jakarta 
Commons 
project社区中开发的框架，已经被广泛的接受并且使用于许多有趣的应用中，特别的是他被Struts和Shale应用框架作为处理HTTP请求处理的基础机制。<span style="color: #ff6600;">你可以在需要定义和执行一组连续的步骤时使用Commons Chain。
</span>
</p>
<p>至于经典设计模式，开发者和架构师普遍使用模版方法（Template Method）造型顺序处理。模版方法（Template Method）中使用一个抽象的父类定义使用的算法：处理的步骤，具体实现交给子类。当然，父类也可以为算法所使用的方法提供一个缺省实现。由于模版方法（Template 
Method）依赖继承&mdash;&mdash;子类必须继承定义了算法的父类&mdash;&mdash;因此使用这个模式的软件表现出紧耦合而且缺少灵活性。又由于实现类添加自己的行为前必须扩展
父类，导致开发人员被限制于类层次中，从而限制了程序设计的灵活性。Commons 
Chain使用配置文件定义算法，在程序运行时解析配置文件，从而很好的解决了这个问题。</p>
<p>&nbsp;</p>
<p>现在来看一下Commons Chain是怎样工作的，我们从一个人造的例子开始：二手车销售员的商业流程。下面是销售流程的步骤：</p>
<ol>
<li>得到用户信息
</li>
<li>试车
</li>
<li>谈判销售
</li>
<li>安排财务
</li>
<li>结束销售</li>
</ol>
<p>现在假设使用模版方法（Template Method）造型这个流程。首先建立一个定义了算法的抽象类：</p>
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">class</span>
&nbsp;SellVehicleTemplate&nbsp;{&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">void</span>
&nbsp;sellVehicle()&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getCustomerInfo();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testDriveVehicle();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negotiateSale();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrangeFinancing();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closeSale();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">void</span>
&nbsp;getCustomerInfo();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">void</span>
&nbsp;testDriveVehicle();&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">void</span>
&nbsp;negotiateSale();&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">void</span>
&nbsp;arrangeFinancing();&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">abstract</span>
&nbsp;<span class="keyword">void</span>
&nbsp;closeSale();&nbsp;&nbsp;</li>
<li>}&nbsp;&nbsp;</li>
</ol>
</div>
<pre class="java" style="display: none;">public abstract class SellVehicleTemplate {

    public void sellVehicle() {
        getCustomerInfo();
        testDriveVehicle();
        negotiateSale();
        arrangeFinancing();
        closeSale();
    }

    public abstract void getCustomerInfo();

    public abstract void testDriveVehicle();

    public abstract void negotiateSale();

    public abstract void arrangeFinancing();

    public abstract void closeSale();
}</pre>
<p>
<br />
现在来看一下怎样用Commons Chain实现这个流程。首先，下载Commons Chain。你可以直接下载最新的zip或tar文件，也可以从CVS或者SubVersion源码库检出Commons Chain模块得到最新的代码。解压缩打包文件，将commons-chain.jar放入你的classpath中。
<br />
使用Commons Chain实现这个商业流程，必须将流程中的每一步写成一个类，这个类需要有一个public的方法execute()。这和传统的命令模式（Command pattern）实现相同。下面简单实现了&ldquo;得到用户信息&rdquo;：
</p>
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Command;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;GetCustomerInfo&nbsp;<span class="keyword">implements</span>
&nbsp;Command&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Get&nbsp;customer&nbsp;info&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.put(<span class="string">&quot;customerName&quot;</span>
,<span class="string">&quot;George&nbsp;Burdell&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp; 
</li>
</ol>
</div>
<div class="dp-highlighter">由于只是演示，这个类并没有做很多工作。这里将用户名放入了Context对象ctx中。<span style="color: #ff6600;">这个Context对象连接了各个命令。暂时先将这个对象想象成
根据关键字存取值的哈希表。所有后来的命令可以通过它访问刚才放入的用户名。</span>
TestDriveVehicle，NegotiateSale和 
ArrangeFinancing命令的实现只是简单的打印了将执行什么操作。
</div>
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Command;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;TestDriveVehicle&nbsp;<span class="keyword">implements</span>
&nbsp;Command&nbsp;{&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Test&nbsp;drive&nbsp;the&nbsp;vehicle&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;NegotiateSale&nbsp;<span class="keyword">implements</span>
&nbsp;Command&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Negotiate&nbsp;sale&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;ArrangeFinancing&nbsp;<span class="keyword">implements</span>
&nbsp;Command&nbsp;{&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Arrange&nbsp;financing&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp; 
</li>
</ol>
</div>
<div class="dp-highlighter">CloseSale从Context对象中取出GetCustomerInfo放入的用户名，并将其打印。</div>
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Command;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;CloseSale&nbsp;<span class="keyword">implements</span>
&nbsp;Command&nbsp;{&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Congratulations&nbsp;&quot;</span>
&nbsp;+&nbsp;ctx.get(<span class="string">&quot;customerName&quot;</span>
)&nbsp;+<span class="string">&quot;,&nbsp;you&nbsp;bought&nbsp;a&nbsp;new&nbsp;car!&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp; 
</li>
</ol>
现在你可以将这个流程定义成一个序列（或者说&ldquo;命令链&rdquo;）。
<br />
<div class="dp-highlighter">
<div class="bar">
<div class="tools"> </div>
</div>
<ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.impl.ChainBase;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Command;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.impl.ContextBase;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;SellVehicleChain&nbsp;<span class="keyword">extends</span>
&nbsp;ChainBase&nbsp;{&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;SellVehicleChain()&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">super</span>
();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCommand(<span class="keyword">new</span>
&nbsp;GetCustomerInfo());&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCommand(<span class="keyword">new</span>
&nbsp;TestDriveVehicle());&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCommand(<span class="keyword">new</span>
&nbsp;NegotiateSale());&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCommand(<span class="keyword">new</span>
&nbsp;ArrangeFinancing());&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCommand(<span class="keyword">new</span>
&nbsp;CloseSale());&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">static</span>
&nbsp;<span class="keyword">void</span>
&nbsp;main(String[]&nbsp;args)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Command&nbsp;process&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;SellVehicleChain();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context&nbsp;ctx&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;ContextBase();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process.execute(ctx);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp; 
</li>
<li>}&nbsp;&nbsp;</li>
</ol>
</div>
<pre class="java" style="display: none;">package com.jadecove.chain.sample;

import org.apache.commons.chain.impl.ChainBase;
import org.apache.commons.chain.Command;
import org.apache.commons.chain.Context;
import org.apache.commons.chain.impl.ContextBase;

public class SellVehicleChain extends ChainBase {

    public SellVehicleChain() {
        super();
        addCommand(new GetCustomerInfo());
        addCommand(new TestDriveVehicle());
        addCommand(new NegotiateSale());
        addCommand(new ArrangeFinancing());
        addCommand(new CloseSale());
    }

    public static void main(String[] args) throws Exception {
        Command process = new SellVehicleChain();
        Context ctx = new ContextBase();
        process.execute(ctx);
    }

}</pre>
</div>
<div class="dp-highlighter">
<br />
运行这个类将会输出以下结果：
<br />
<span style="color: darkred;">Get customer info
<br />
Test drive the vehicle
<br />
Negotiate sale
<br />
Arrange financing
<br />
Congratulations George Burdell, you bought a new car!</span>
</div>
<div class="dp-highlighter"><br />
</div>
<div class="dp-highlighter">在进一步深入之前，让我们来看一下我们使用了的Commons Chain的类和接口。
</div>
<div class="dp-highlighter"><img src="http://hi.csdn.net/attachment/201101/20/0_1295508251Cwz8.gif" alt="" />
</div>
<div class="dp-highlighter">Command 类和Chain类的关系就是组合模式（Composite 
pattern）[GoF]的例子：Chain不仅由多个Command组成，而且自己也是Command。这使你可以非常简单得将单个命令
（Command）替换成由多个命令（Command）组成的链（Chain）。这个由Command对象唯一操作定义的方法代表了一个直接的命令：
<br />
<br />
public boolean execute(Context context);
<br />
<br />
参数context仅仅是一个存放了名称-值对的集合。接口Context在这里作为一个标记接口：它扩展了java.util.Map但是没有
添加任何特殊的行为。于此相反，<span style="color: #ff6600;">类ContextBase不仅提供了对Map的实现而且增加了一个特性：属性-域透明。这个特性可以通过使用Map的
put和get 
方法操作JavaBean的域，当然这些域必须使用标准的get*和set*方法定义。那些通过JavaBean的&ldquo;setter&rdquo;方法设置的
值，可以通过对应的域名称，用Map的get方法得到。同样，那些用Map的put方法设置的值可以通过JavaBean的&ldquo;getter&rdquo;方法得到。
</span>
</div>
<div class="dp-highlighter">例如，我们可以创建一个专门的context提供显式的customerName属性支持。
<br />
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.impl.ContextBase;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;SellVehicleContext&nbsp;<span class="keyword">extends</span>
&nbsp;ContextBase&nbsp;{&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span>
&nbsp;String&nbsp;customerName;&nbsp;&nbsp;&nbsp; 
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;String&nbsp;getCustomerName()&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;customerName;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">void</span>
&nbsp;setCustomerName(String&nbsp;name)&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>
.customerName&nbsp;=&nbsp;name;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>}&nbsp;&nbsp;</li>
</ol>
</div>
<pre class="java" style="display: none;">package com.jadecove.chain.sample;

import org.apache.commons.chain.impl.ContextBase;

public class SellVehicleContext extends ContextBase {

    private String customerName;

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String name) {
        this.customerName = name;
    }

}</pre>
<br />
现在你既可以进行Map的一般属性存取操作,同时也可以使用显式的JavaBean的访问和修改域的方法，这两个将产生同样的效果。但是首先你需要在运行SellVehicleChain时实例化SellVehiceContext而不是ContextBase。
<br />
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">static</span>
&nbsp;<span class="keyword">void</span>
&nbsp;main(String[]&nbsp;args)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Command&nbsp;process&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;SellVehicleChain();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Context&nbsp;ctx&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;SellVehicleContext();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;process.execute(ctx);&nbsp;&nbsp;</li>
<li>}&nbsp;&nbsp;</li>
</ol>
</div>
<pre class="java" style="display: none;">public static void main(String[] args) throws Exception {
    Command process = new SellVehicleChain();
    Context ctx = new SellVehicleContext();
    process.execute(ctx);
}</pre>
<br />
尽管你不改变GetCustomerInfo中存放用户名的方法&mdash;&mdash;仍然使用ctx.put(&quot;customerName&quot;, &quot;George Burdell&quot;)&mdash;&mdash;你可以在CloseSale中使用getCustomerName()方法得到用户名。
<br />
<div class="dp-highlighter">
<div class="bar">
<div class="tools"> </div>
</div>
<ol class="dp-j">
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">boolean</span>
&nbsp;execute(Context&nbsp;ctx)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;SellVehicleContext&nbsp;myCtx&nbsp;=&nbsp;(SellVehicleContext)&nbsp;ctx;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Congratulations&nbsp;&quot;</span>
&nbsp;+&nbsp;myCtx.getCustomerName()&nbsp;+&nbsp;<span class="string">&quot;,&nbsp;you&nbsp;bought&nbsp;a&nbsp;new&nbsp;car!&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;<span class="keyword">false</span>
;&nbsp;&nbsp;</li>
<li>}&nbsp; 
</li>
</ol>
</div>
<div class="dp-highlighter">那些依赖类型安全和context的显式域的命令（Command）可以利用标准的getter和setter方法。当一些新的命令（Command）被
添加时，<span style="color: #ff6600;">它们可以不用考虑context的具体实现，直接通过Map的get和put操作属性。不论采用何种机制，ContextBase类都可以保证命
令（Command）间可以通过context互操作。</span>
</div>
<div class="dp-highlighter"><span style="color: #ff6600;"><br />
</span>
</div>
<div class="dp-highlighter">下面这个例子展示了如何使用Commons Chain的API建立并执行一组顺序的命令。当然，<span style="color: #ff6600;">和现在大多数Java软件一样，Commons 
Chain可以使用XML文件作为配置文件。</span>
你可以将&ldquo;汽车销售&rdquo;流程的步骤在XML文件中定义。这个文件有个规范的命名chain- 
config.xml。
<br />
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Xml代码 </div>
</div>
<ol class="dp-xml">
<li><span class="tag">&lt;</span>
<span class="tag-name">catalog</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">chain</span>
&nbsp;<span class="attribute">name</span>
=<span class="attribute-value">&quot;sell-vehicle&quot;</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;GetCustomerInfo&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.GetCustomerInfo&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;TestDriveVehicle&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.TestDriveVehicle&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;NegotiateSale&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.NegotiateSale&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;ArrangeFinancing&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.ArrangeFinancing&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;CloseSale&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.CloseSale&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;/</span>
<span class="tag-name">chain</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li><span class="tag">&lt;/</span>
<span class="tag-name">catalog</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
</ol>
</div>
<pre class="xml" style="display: none;">&lt;catalog&gt;
  &lt;chain name=&quot;sell-vehicle&quot;&gt;
    &lt;command id=&quot;GetCustomerInfo&quot; className=&quot;com.jadecove.chain.sample.GetCustomerInfo&quot;/&gt;
    &lt;command id=&quot;TestDriveVehicle&quot; className=&quot;com.jadecove.chain.sample.TestDriveVehicle&quot;/&gt;
    &lt;command id=&quot;NegotiateSale&quot; className=&quot;com.jadecove.chain.sample.NegotiateSale&quot;/&gt;
    &lt;command id=&quot;ArrangeFinancing&quot; className=&quot;com.jadecove.chain.sample.ArrangeFinancing&quot;/&gt;
    &lt;command id=&quot;CloseSale&quot; className=&quot;com.jadecove.chain.sample.CloseSale&quot;/&gt;
  &lt;/chain&gt;
&lt;/catalog&gt;</pre>
</div>
<div class="dp-highlighter">
<br />
Chain的配置文件可以包含多个链定义，这些链定义可以集合进不同的编目中。在这个例子中，链定义在一个默认的编目中定义。事实上，你可以在这个文件中定义多个名字的编目，每个编目可拥有自己的链组。
</div>
<div class="dp-highlighter"><span style="color: #ff6600;">现在你可以使用Commons Chain提供的类载入编目并得到指定的链，而不用像SellVehicleChain中那样自己在程序中定义一组命令：</span>
<br />
<div class="dp-highlighter"><ol class="dp-j">
<li><span class="keyword">package</span>
&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Catalog;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Command;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.config.ConfigParser;&nbsp;&nbsp;</li>
<li><span class="keyword">import</span>
&nbsp;org.apache.commons.chain.impl.CatalogFactoryBase;&nbsp;&nbsp;&nbsp; 
</li>
<li><span class="keyword">public</span>
&nbsp;<span class="keyword">class</span>
&nbsp;CatalogLoader&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span>
&nbsp;<span class="keyword">static</span>
&nbsp;<span class="keyword">final</span>
&nbsp;String&nbsp;CONFIG_FILE&nbsp;=&nbsp;<span class="string">&quot;/com/jadecove/chain/sample/chain-config.xml&quot;</span>
;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span>
&nbsp;ConfigParser&nbsp;parser;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span>
&nbsp;Catalog&nbsp;catalog;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;CatalogLoader()&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parser&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;ConfigParser();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;Catalog&nbsp;getCatalog()&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span>
&nbsp;(catalog&nbsp;==&nbsp;<span class="keyword">null</span>
)&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parser.parse(<span class="keyword">this</span>
.getClass().getResource(CONFIG_FILE));&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catalog&nbsp;=&nbsp;CatalogFactoryBase.getInstance().getCatalog();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
&nbsp;catalog;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
&nbsp;<span class="keyword">static</span>
&nbsp;<span class="keyword">void</span>
&nbsp;main(String[]&nbsp;args)&nbsp;<span class="keyword">throws</span>
&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CatalogLoader&nbsp;loader&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;CatalogLoader();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catalog&nbsp;sampleCatalog&nbsp;=&nbsp;loader.getCatalog();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Command&nbsp;command&nbsp;=&nbsp;sampleCatalog.getCommand(<span class="string">&quot;sell-vehicle&quot;</span>
);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context&nbsp;ctx&nbsp;=&nbsp;<span class="keyword">new</span>
&nbsp;SellVehicleContext();&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;command.execute(ctx);&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
<li>}&nbsp; 
</li>
</ol>
</div>
</div>
<div class="dp-highlighter">
Chain 使用Commons Digester来读取和解析配置文件。因此你需要将Commons 
Digester.jar加入classpath中。我使用了1.6版本并且工作得很好。Digester使用了Commons 
Collectios（我使用的版本是3.1），Commons Logging（版本1.0.4），Commons 
BeanUtils（1.7.0），因此你也需要将它们的jar文件加入classpath中。在加入这些jar后，CatalogLoader就可以被
编译和运行，它的输出和另外两个测试完全相同。
</div>
<div class="dp-highlighter"><br />
</div>
<div class="dp-highlighter">现在你可以在XML文件中定义链，并可以在程序中得到这个链（别忘了链也是命令），这样扩展的可能性和程序的灵活性可以说是无限的。假设过程&ldquo;安排财务&rdquo;
实际上由一个完全分离的商业部门处理。这个部门希望为这种销售建立自己的工作流程。 
Chain提供了嵌套链来实现这个要求。因为链本身就是命令，因此你可以用指向另一个链的引用替换一个单一用途的命令。下面是增加了新流程的链的定义：
<br />
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Xml代码 </div>
</div>
<ol class="dp-xml">
<li><span class="tag">&lt;</span>
<span class="tag-name">catalog</span>
&nbsp;<span class="attribute">name</span>
=<span class="attribute-value">&quot;auto-sales&quot;</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">chain</span>
&nbsp;<span class="attribute">name</span>
=<span class="attribute-value">&quot;sell-vehicle&quot;</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;GetCustomerInfo&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.GetCustomerInfo&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;TestDriveVehicle&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.TestDriveVehicle&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;NegotiateSale&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.NegotiateSale&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #ff6600;"><span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;org.apache.commons.chain.generic.LookupCommand&quot;</span>
&nbsp;&nbsp;<span class="attribute">catalogName</span>
=<span class="attribute-value">&quot;auto-sales&quot;</span>
&nbsp;<span class="attribute">name</span>
=<span class="attribute-value">&quot;arrange-financing&quot;</span>
&nbsp;<span class="attribute">optional</span>
=<span class="attribute-value">&quot;true&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</span>
</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;CloseSale&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.CloseSale&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;/</span>
<span class="tag-name">chain</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">chain</span>
&nbsp;<span class="attribute">name</span>
=<span class="attribute-value">&quot;arrange-financing&quot;</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
&nbsp;<span class="attribute">id</span>
=<span class="attribute-value">&quot;ArrangeFinancing&quot;</span>
&nbsp;<span class="attribute">className</span>
=<span class="attribute-value">&quot;com.jadecove.chain.sample.ArrangeFinancing&quot;</span>
<span class="tag">/&gt;</span>
&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;<span class="tag">&lt;/</span>
<span class="tag-name">chain</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
<li><span class="tag">&lt;/</span>
<span class="tag-name">catalog</span>
<span class="tag">&gt;</span>
&nbsp;&nbsp;</li>
</ol>
Commons 
Chain提供了一个常用的命令LookupCommand来查找和执行另一个链。属性optional用于控制当指定的嵌套链没有找到时如何处理。 
optional=true时，即使链没找到，处理也会继续。反之，LookupCommand将抛出 
IllegalArgumentException，告知指定的命令未找到。
<br />
<br />
在下面三种情况下，命令链将结束：
<br />
<ol>
<li>命令的execute方法返回true
</li>
<li>运行到了链的尽头
</li>
<li>命令抛出异常</li>
</ol>
</div>
<div class="dp-highlighter">
当链完全处理完一个过程后，命令就返回true。这是责任链模式（Chain of 
Responsibility）的基本概念。处理从一个命令传递到另一个命令，直到某个命令（Command）处理了这个命令。如果在到达命令序列尽头时
仍没有处理返回true，也假设链已经正常结束。
</div>
</div>
<div class="dp-highlighter">当有命令抛出错误时链就会非正常结束。在Commons Chain中，如果有命令抛出错误，链的执行就会中断。不论是运行时错误（runtime 
exception）还是应用错误（application 
exception），都会抛出给链的调用者。但是许多应用都需要对在命令之外定义的错误做明确的处理。Commons 
Chain提供了Filter接口来满足这个要求。Filter继承了Command，添加了一个名为postprocess的方法。
<br />
<br />
public boolean postprocess(Context context, Exception exception);
</div>
<div class="dp-highlighter"><br />
<span style="color: #ff6600;">只要Filter的execute方法被调用，不论链的执行过程中是否抛出错误，Commons 
Chain都将保证Filter的postprocess方法被调用。和servlet的过滤器（filter）相同，Commons 
Chain的Filter按它们在链中的顺序依次执行。同样，Filter的postprocess方法按倒序执行。</span>
你可以使用这个特性实现自己的错误处
理。下面是一个用于处理我们例子中的错误的Filter：</div>
<div class="dp-highlighter"><ol class="dp-j">
<li><span><span class="keyword">package</span>
<span>&nbsp;com.jadecove.chain.sample;&nbsp;&nbsp;</span>
&nbsp; <br />
</span>
</li>
<li><span><span class="keyword">import</span>
<span>&nbsp;org.apache.commons.chain.Context;&nbsp;&nbsp;</span>
</span>
</li>
<li><span><span class="keyword">import</span>
<span>&nbsp;org.apache.commons.chain.Filter;&nbsp;&nbsp;</span>
</span>
</li>
<li><span><span class="keyword">public</span>
<span>&nbsp;</span>
<span class="keyword">class</span>
<span>&nbsp;SellVehicleExceptionHandler&nbsp;</span>
<span class="keyword">implements</span>
<span>&nbsp;Filter&nbsp;{&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
<span>&nbsp;</span>
<span class="keyword">boolean</span>
<span>&nbsp;execute(Context&nbsp;context)&nbsp;</span>
<span class="keyword">throws</span>
<span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Filter.execute()&nbsp;called.&quot;</span>
<span>);&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
<span>&nbsp;</span>
<span class="keyword">false</span>
<span>;&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
</li>
<li><span>&nbsp;&nbsp;</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>
<span>&nbsp;</span>
<span class="keyword">boolean</span>
<span>&nbsp;postprocess(Context&nbsp;context,&nbsp;Exception&nbsp;exception)&nbsp;{&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span>
<span>&nbsp;(exception&nbsp;==&nbsp;</span>
<span class="keyword">null</span>
<span>)&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
<span>&nbsp;</span>
<span class="keyword">false</span>
<span>;&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">&quot;Exception&nbsp;&quot;</span>
<span>&nbsp;+&nbsp;exception.getMessage()&nbsp;+&nbsp;</span>
<span class="string">&quot;&nbsp;occurred.&quot;</span>
<span>);&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>
<span>&nbsp;</span>
<span class="keyword">true</span>
<span>;&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
</li>
<li><span>&nbsp;&nbsp;</span>
</li>
<li><span>}&nbsp; <br />
</span>
</li>
</ol>
</div>
<div class="dp-highlighter">Filter在配置文件中的定义就和普通的命令（Command）定义相同：
<br />
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Xml代码 </div>
</div>
<ol class="dp-xml">
<li><span><span class="tag">&lt;</span>
<span class="tag-name">chain</span>
<span>&nbsp;</span>
<span class="attribute">name</span>
<span>=</span>
<span class="attribute-value">&quot;sell-vehicle&quot;</span>
<span class="tag">&gt;</span>
<span>&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
<span>&nbsp;</span>
<span class="attribute">id</span>
<span>=</span>
<span class="attribute-value">&quot;ExceptionHandler&quot;</span>
<span>&nbsp;</span>
<span class="attribute">className</span>
<span>&nbsp;=&nbsp;</span>
<span class="attribute-value">&quot;com.jadecove.chain.sample.SellVehicleExceptionHandler&quot;</span>
<span class="tag">/&gt;</span>
<span>&nbsp;&nbsp;</span>
</span>
</li>
<li><span>&nbsp;&nbsp;<span class="tag">&lt;</span>
<span class="tag-name">command</span>
<span>&nbsp;</span>
<span class="attribute">id</span>
<span>=</span>
<span class="attribute-value">&quot;GetCustomerInfo&quot;</span>
<span>&nbsp;</span>
<span class="attribute">className</span>
<span>=</span>
<span class="attribute-value">&quot;com.jadecove.chain.sample.GetCustomerInfo&quot;</span>
<span class="tag">/&gt;</span>
<span>&nbsp; <br />
</span>
</span>
</li>
<li><span><span>......<br />
</span>
</span>
</li>
</ol>
</div>
<pre class="xml" style="display: none;">&lt;chain name=&quot;sell-vehicle&quot;&gt;
  &lt;command id=&quot;ExceptionHandler&quot; className = &quot;com.jadecove.chain.sample.SellVehicleExceptionHandler&quot;/&gt;
  &lt;command id=&quot;GetCustomerInfo&quot; className=&quot;com.jadecove.chain.sample.GetCustomerInfo&quot;/&gt;</pre>
</div>
<div class="dp-highlighter">
<br />
Filter 
的execute方法按定义的序列调用。然而，它的postprocess方法将在链执行完毕或抛出错误后执行。当一个错误被抛出时， 
postprocess方法处理完后会返回true，表示错误处理已经完成。链的执行并不会就此结束，但是本质上来说这个错误被捕捉而且不会再向外抛出。
如果postprocess方法返回false，那错误会继续向外抛出，然后链就会非正常结束。
<br />
<br />
让我们假设ArrangeFinancing因为用户信用卡损坏抛出错误。SellVehicleExceptionHandler就能捕捉到这个错误，程序输出如下：
<br />
<span style="color: darkred;">Filter.execute() called.
<br />
Get customer info
<br />
Test drive the vehicle
<br />
Negotiate sale
<br />
Exception Bad credit occurred.</span>
<br />
<br />
结合了过滤器（filter）和子链技术后，你就可以造型很复杂的工作流程。</div>
<div class="dp-highlighter"><br />
</div>
<div class="dp-highlighter">Commons Chain是一个很有前途的框架，现在仍在开发，新的功能被频繁地添加到其中。在下一篇关于Commons Chain的文章中，我们将研究Struts 1.3中是如何使用Commons Chain的。 Struts 1.3中用完全使用Commons Chain的类替换了原来的处理HTTP请求的类。如果你以前自己定制过Struts的请求处理（request processor），你将发现处理这个问题时Commons Chain为程序带来了很好的灵活性。</div>
<pre class="java" style="display: none;">public boolean execute(Context ctx) throws Exception {
    SellVehicleContext myCtx = (SellVehicleContext) ctx;
    System.out.println(&quot;Congratulations &quot; + myCtx.getCustomerName() + &quot;, you bought a new car!&quot;);
    return false;
}</pre>
</div>
</div>

<!--192.168.100.33-->
  </div>
  <script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
  <script type="text/javascript">
    var fileName = '6155075';
    var commentscount = 0;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=785413"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>

</div>
</body>
</html>
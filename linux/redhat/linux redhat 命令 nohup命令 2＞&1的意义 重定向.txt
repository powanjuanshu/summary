>./command.sh > output.txt
其中的>就是标准输出符号，其实是1 > output的缩写 
>./command.sh 2 > output.txt
＃这里的2>就是将标准错误输出到output文件里。
而0< 则是标准输入了。
下面步入正题，重定向后台命令
>nohup ./command.sh > output.txt 2>&1 &
解释：前面的nohup 和后面的&我想大家都能明白了把。
主要是中间的2>&1的意思
这个意思是把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面，
所以结果是标准错误和标准输出都导入文件output里面了。
至于为什么需要将标准错误重定向到标准输出的原因，那就归结为标准错误没有缓冲区，而stdout有。
这就会导致 >output 2>output 文件output被两次打开，而stdout和stderr将会竞争覆盖，这肯定不是我门想要的. 
这就是为什么有人会写成：
nohup ./command.sh >output 2>output出错的原因了
最后谈一下/dev/null文件的作用
这是一个无底洞，任何东西都可以定向到这里，但是却无法打开。
所以一般很大的stdou和stderr当你不关心的时候可以利用stdout和stderr定向到这里>./command.sh >/dev/null 2>&1
package ioc.test;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class TesMain {
	public static void main(String[] args) {
		AbstractApplicationContext ctx = new ClassPathXmlApplicationContext("spring/applicationContext.xml");
		ctx.start(); // 触发ContextStartedEvent事件
		ctx.refresh(); // 触发ContextRefreshedEvent事件
		ctx.stop(); // 触发ContextStoppedEvent事件
		ctx.close(); // 关闭容器，触发ContextClosedEvent事件
	}
}
---------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	<bean id="ApplicationEventListener" class="ioc.test.ApplicationEventListener" />
</beans>
-----------------------------
package ioc.test;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.context.event.ContextStartedEvent;
import org.springframework.context.event.ContextStoppedEvent;
public class ApplicationEventListener implements ApplicationListener {
	public void onApplicationEvent(ApplicationEvent event) {
		if (event instanceof ContextStartedEvent) {
			System.out.println("start事件发生");
		} else if (event instanceof ContextRefreshedEvent) { // 如果是容器刷新事件
			System.out.println("refresh事件发生");
		} else if (event instanceof ContextStoppedEvent) {
			System.out.println("stop事件发生");
		} else if (event instanceof ContextClosedEvent) { // 如果是容器关闭事件
			System.out.println("close事件发生");
		}
	}
}
--------------------------------------
Spring中ApplicationContext的事件机制(二 内定事件) 

(残梦追月原创,转载注明)

  在Spring中已经定义了五个标准事件，分别介绍如下：

1)      ContextRefreshedEvent：当ApplicationContext初始化或者刷新时触发该事件。

2)      ContextClosedEvent：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。

3)      RequestHandleEvent：在Web应用中，当一个http请求（request）结束触发该事件。

ContestStartedEvent：Spring2.5新增的事件，当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。

5)      ContestStopedEvent：Spring2.5新增的事件，当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。

下面通过一个例子展示如何处理Spring内定的事件（例程3.8）。创建一个Java工程，添加Spring开发能力后，新建ioc.test包。在包中新建ApplicationEventListener类，实现ApplicationListener接口，在onApplicationEvent()方法中添加事件处理代码，如下：
 1 package ioc.test;
 2 
 3 //Import省略
 4 public class ApplicationEventListener implements ApplicationListener {
 5 
 6     public void onApplicationEvent(ApplicationEvent event) {
 7 
 8         //如果是容器刷新事件
 9         if(event instanceof ContextClosedEvent ){
10             System.out.println(event.getClass().getSimpleName()+" 事件已发生！");    
11         }else if(event instanceof ContextRefreshedEvent ){//如果是容器关闭事件
12             System.out.println(event.getClass().getSimpleName()+" 事件已发生！");    
13         }else if(event instanceof ContextStartedEvent ){
14             System.out.println(event.getClass().getSimpleName()+" 事件已发生！");
15         }else if(event instanceof ContextStoppedEvent){
16             System.out.println(event.getClass().getSimpleName()+" 事件已发生！");
17         }else{
18             System.out.println("有其它事件发生:"+event.getClass().getName());
19         }
20                     
21     }
22 
23 }
24 



在Spring配置文件中定义一个Bean，类为ApplicationEventListener，代码如下：


1 <?xml version="1.0" encoding="UTF-8"?>
2 <beans …………    
3 
4    <bean id="ApplicationEventListener" class="ioc.test.ApplicationEventListener" />
5 
6 </beans>
7 



添加含有主方法的TesMain类，在主方法中，调用容器的相应方法，触发Spring内定事件，代码如下：


 1 package ioc.test;
 2 
 3 //import省略
 4 public class TesMain {
 5 
 6     public static void main(String[] args) {
 7         AbstractApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
 8         
 9 
10            //    ac.refresh();//触发ContextRefreshedEvent事件            
11         ac.start(); //触发ContextStartedEvent事件
12         ac.stop();  //触发ContextStoppedEvent事件        
13         ac.close(); //关闭容器，触发ContextClosedEvent事件
14 
15     }
16 }
17 




运行主类，控制台输出如下：






从例子中可以知道，要注册事件监听器，我们只需要把它配置成一个Bean即可，ApplicationContext容器会自动将其注册。


web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:/spring/spring-context.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <servlet>
        <servlet-name>springServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:/spring/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
    <!-- 解决HTTP PUT请求Spring无法获取请求参数的问题 -->
    <!-- 浏览器不支持put,delete等method,由该filter将/blog?_method=delete转换为标准的http delete方法 -->
    <filter>  
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>HiddenHttpMethodFilter</filter-name>  
        <servlet-name>springServlet</servlet-name>
    </filter-mapping>  
    
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>

spring-mvc.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <mvc:annotation-driven>
        <!--spring mvc的自动转换功能 默认：text/html;charset=UTF-8-->
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value = "text/html;charset=UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/*.html" location="/" />
    <context:component-scan base-package="com.bestpay.paycenter.entry.http.controller"/>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>

spring-context.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd">
    
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.bestpay.paycenter.entry.http" />
</beans>

package com.bestpay.paycenter.entry.http.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;

/**
 * 基于Restful风格架构测试
 *
 */
@RestController
public class CacheReload {

   @RequestMapping(value = "/hello", produces = "text/plain;charset=UTF-8")
    public @ResponseBody String hello() {
        return "你好！hello";
    }
	
    @RequestMapping(value = "/say/{msg}", produces = "application/json;charset=UTF-8")  
    public @ResponseBody String say(@PathVariable(value = "msg") String msg) {  
        return "{'msg':'you say:'" + msg + "'}";  
    }
	
    @RequestMapping(value = "/person/{id:\\d+}", method = RequestMethod.GET)  
    public @ResponseBody  
    Person getPerson(@PathVariable("id") int id) {  
        System.out.println("获取人员信息id=" + id);
        Person person = new Person();
        person.setName("张三");
        person.setSex("男");
        person.setAge(30);
        person.setId(id);
        return person;
    }
	
    @RequestMapping(value = "/person/{id:\\d+}", method = RequestMethod.DELETE)  
    public @ResponseBody Object deletePerson(@PathVariable("id") int id) {  
        System.out.println("删除人员信息id=" + id);  
        JSONObject jsonObject = new JSONObject();  
        jsonObject.put("msg", "删除人员信息成功");  
        return jsonObject;  
    }  
	
    @RequestMapping(value = "/person", method = RequestMethod.POST)  
    public @ResponseBody Object addPerson(Person person) {//public ModelAndView updateProduct(@RequestBody Product pro, HttpServletRequest request,HttpServletResponse response)和以往不一样的是, 后台接收参数的对象前面 加了个@RequestBody , 这个是用于把传来的JSON 转换成接收的对象, 如果是form提交就不需要了, 但如果前台用的是application/json类型传进来,就一定要加@RequestBody
	System.out.println("注册人员信息成功id=" + person.getId());
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("msg", "注册人员信息成功");
        return jsonObject;  
    }
	
	@RequestMapping(value = "/person", method = RequestMethod.PUT)  
    public @ResponseBody  
    Object updatePerson(Person person) {  
	System.out.println("更新人员信息id=" + person.getId());  
        JSONObject jsonObject = new JSONObject();  
        jsonObject.put("msg", "更新人员信息成功");  
        return jsonObject;  
    }
	
	@RequestMapping(value = "/person", method = RequestMethod.PATCH)  
    public @ResponseBody  
    List<Person> listPerson(@RequestParam(value = "name", required = false, defaultValue = "") String name) {  
	System.out.println("查询人员name like " + name);  
        List<Person> lstPersons = new ArrayList<Person>();
        
        Person person = new Person();  
        person.setName("张三");  
        person.setSex("男");  
        person.setAge(25);  
        person.setId(101);  
        lstPersons.add(person);
        
        Person person2 = new Person();  
        person2.setName("李四");  
        person2.setSex("女");  
        person2.setAge(23);  
        person2.setId(102);  
        lstPersons.add(person2);  
  
        Person person3 = new Person();  
        person3.setName("王五");  
        person3.setSex("男");  
        person3.setAge(27);  
        person3.setId(103);  
        lstPersons.add(person3);  
  
        return lstPersons;  
    }
	
    /////////////////////////////////////////////////////////////////////////	
	
    @RequestMapping(value = {"cachesReload.action","cachesReload.do"})
    @ResponseBody
    public String reload(String tableName){
    	System.out.println("test");
        return "DatabaseConfigInfo caches success !!";
    }
    
    /*　增　*/
    @RequestMapping(value="blog", method=RequestMethod.POST)
	public String create(String userInfo, HttpServletRequest req, HttpServletResponse res) {
    	return "123";
	}
    
    /* 删  */
    @RequestMapping(value="blog/{id}", method = RequestMethod.DELETE)
    @ResponseBody
    public String delete(@PathVariable("id") Long id, HttpServletRequest req, HttpServletResponse res){
    	System.out.println("log:"+id);
    	return "123";
    }
    
    /*　改　*/
    @RequestMapping(value="/{id}", method=RequestMethod.PUT)
	public String update(@PathVariable("id") Long id, HttpServletRequest req, HttpServletResponse res) {
    	return "123";
	}
}

index.jsp:
<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<%
	String path = request.getContextPath();
	String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";
%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<base href="<%=basePath%>">
<title>Uikit Test</title>
	<meta http-equiv="pragma" content="no-cache">
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">
	<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
	<meta http-equiv="description" content="This is my page">
</head>
<body>
<div style="width:800px;margin-top:10px;margin-left: auto;margin-right: auto;text-align: center;">
	<h2>Uikit Test</h2>
</div>
<div style="width:800px;margin-left: auto;margin-right: auto;">
	<fieldset class="uk-form">
		<legend>Uikit表单渲染测试</legend>
		<div class="uk-form-row">
			<input type="text" class="uk-width-1-1">
		</div>
		<div class="uk-form-row">
			<input type="text" class="uk-width-1-1 uk-form-success">
		</div>
		<div class="uk-form-row">
			<input type="text" class="uk-width-1-1 uk-form-danger">
		</div>
		<div class="uk-form-row">
			<input type="text" class="uk-width-1-1">
		</div>
		<div class="uk-form-row">
			<select id="form-s-s">
				<option>---请选择---</option>
				<option>是</option>
				<option>否</option>
			</select>
		</div>
		<div class="uk-form-row">
			<input type="date" id="form-h-id" />
		</div>
	</fieldset>
	<fieldset class="uk-form">
		<legend>基于Restful架构风格的资源请求测试</legend>
		<button class="uk-button uk-button-primary uk-button-large" id="btnGet">获取人员GET</button>
		<button class="uk-button uk-button-primary uk-button-large" id="btnAdd">添加人员POST</button>
		<button class="uk-button uk-button-primary uk-button-large" id="btnUpdate">更新人员PUT</button>
		<button class="uk-button uk-button-danger uk-button-large" id="btnDel">删除人员DELETE</button>
		<button class="uk-button uk-button-primary uk-button-large" id="btnList">查询列表PATCH</button>
	</fieldset>
</div>
<script type="text/javascript" src="js/jquery/jquery-1.11.1.min.js"></script>
<script type="text/javascript">
	(function(window,$){
		alert(13);
		var dekota={
			url:'',
			init:function(){
				dekota.url='<%=basePath%>';
				$("#btnGet").click(dekota.getPerson);
				$("#btnAdd").click(dekota.addPerson);
				$("#btnDel").click(dekota.delPerson);
				$("#btnUpdate").click(dekota.updatePerson);
				$("#btnList").click(dekota.listPerson);
			},
			getPerson:function(){
				$.ajax({
					url: dekota.url + 'person/101/',
					type: 'GET',
					dataType: 'json'
				}).done(function(data, status, xhr) {
					alert("获取人员信息成功"+'success');
				}).fail(function(xhr, status, error) {
					alert("请求失败！"+'danger');
				});
			},
			addPerson:function(){
				$.ajax({
					url: dekota.url + 'person',
					type: 'POST',
					dataType: 'json',
					data: {id: 1,name:'张三',sex:'男',age:23}
				}).done(function(data, status, xhr) {
					alert(data.msg+"success");
				}).fail(function(xhr, status, error) {
					alert("请求失败！"+"danger");
				});
			},
			delPerson:function(){
				$.ajax({
					url: dekota.url + 'person/109',
					type: 'DELETE',
					dataType: 'json'
				}).done(function(data, status, xhr) {
					alert(data.msg+"success");
				}).fail(function(xhr, status, error) {
					alert("请求失败！"+"danger");
				});
			},
			updatePerson:function(){
				$.ajax({
					url: dekota.url + 'person',
					type: 'POST',//注意在传参数时，加：_method:'PUT'　将对应后台的PUT请求方法
					dataType: 'json',
					data: {_method:'PUT',id: 221,name:'王五',sex:'男',age:23}
				}).done(function(data, status, xhr) {
					alert(data.msg+"success");
				}).fail(function(xhr, status, error) {
					alert("请求失败！"+"danger");
				});
			},
			listPerson:function(){
				$.ajax({
					url: dekota.url + 'person',
					type: 'POST',//注意在传参数时，加：_method:'PATCH'　将对应后台的PATCH请求方法
					dataType: 'json',
					data: {_method:'PATCH',name: '张三'}
				}).done(function(data, status, xhr) {
					alert("查询人员信息成功"+"success");
				}).fail(function(xhr, status, error) {
					alert("请求失败！"+"danger");
				});
			}
		};
		window.dekota=(window.dekota)?window.dekota:dekota;
		$(function(){
			dekota.init();
		});
	})(window,jQuery);

</script>
</body>
</html>

index2.jsp:
<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<%
	String path = request.getContextPath();
	String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";
%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<base href="<%=basePath%>">
<title>restful Test</title>
	<meta http-equiv="pragma" content="no-cache">
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">
	<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
	<meta http-equiv="description" content="This is my page">
</head>
<body>
<form action="<%=basePath%>person/123" method="post">
	<input type="hidden" name="_method" value="delete"/>
	<input type="text" name="id" id="id" value="12322">
	<input type="submit" value="提交">
</form>
<form action="<%=basePath%>person" method="post">
	<input type="hidden" name="_method" value="put"/>
	<input type="text" name="id" id="id" value="12322">
	<input type="submit" value="提交">
</form>
</body>
</html>
--------------------------------
spring 3.0 应用springmvc 构造RESTful URL 详细讲解

Spring应用服务器RESTServletCSS 
在线springmvc_rest demo
 
 
由于下一版本的rapid-framwork需要集成spring RESTful URL,所以研究了一下怎么搭建. 并碰到了一下问题。
 
springmvc 3.0 中增加 RESTful URL功能，构造出类似javaeye现在的URL。 rest介绍 , 这里还有struts2 rest构造的一篇文章: 使用 Struts 2 开发 RESTful 服务
简单例子如下,比如如下URL
Java代码  
/blog/1  HTTP GET =>    得到id = 1的blog  
/blog/1  HTTP DELETE => 删除 id = 1的blog  
/blog/1  HTTP PUT  =>   更新id = 1的blog  
/blog     HTTP POST =>   新增BLOG  
 
 
以下详细解一下spring rest使用.
 
首先，我们带着如下三个问题查看本文。
1. 如何在java构造没有扩展名的RESTful url,如 /forms/1,而不是 /forms/1.do
2. 由于我们要构造没有扩展名的url本来是处理静态资源的容器映射的，现在被我们的spring占用了，冲突怎么解决?
3. 浏览器的form标签不支持提交delete,put请求，如何曲线解决?
 
springmvc rest 实现

springmvc的resturl是通过@RequestMapping 及@PathVariable annotation提供的,通过如@RequestMapping(value="/blog/{id}",method=RequestMethod.DELETE)即可处理/blog/1 的delete请求.
Java代码  
@RequestMapping(value="/blog/{id}",method=RequestMethod.DELETE)  
public ModelAndView delete(@PathVariable Long id,HttpServletRequest request,HttpServletResponse response) {  
    blogManager.removeById(id);  
    return new ModelAndView(LIST_ACTION);  
}  
 
@RequestMapping @PathVariable如果URL中带参数，则配合使用，如
Java代码  
@RequestMapping(value="/blog/{blogId}/message/{msgId}",method=RequestMethod.DELETE)  
public ModelAndView delete(@PathVariable("blogId") Long blogId,@PathVariable("msgId") Long msgId,HttpServletRequest request,HttpServletResponse response) {  
}  
 
 spring rest配置指南
1. springmvc web.xml配置
Xml代码  
<!-- 该servlet为tomcat,jetty等容器提供,将静态资源映射从/改为/static/目录，如原来访问 http://localhost/foo.css ,现在http://localhost/static/foo.css -->  
<servlet-mapping>  
    <servlet-name>default</servlet-name>  
    <url-pattern>/static/*</url-pattern>  
</servlet-mapping>  
<servlet>  
    <servlet-name>springmvc</servlet-name>  
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
    <load-on-startup>1</load-on-startup>  
</servlet>  
  
<!-- URL重写filter,用于将访问静态资源http://localhost/foo.css 转为http://localhost/static/foo.css -->  
<filter>  
    <filter-name>UrlRewriteFilter</filter-name>  
    <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>  
    <init-param>  
            <param-name>confReloadCheckInterval</param-name>  
            <param-value>60</param-value>  
        </init-param>  
    <init-param>  
                <param-name>logLevel</param-name>  
                <param-value>DEBUG</param-value>  
        </init-param>       
</filter>  
<filter-mapping>  
    <filter-name>UrlRewriteFilter</filter-name>  
    <url-pattern>/*</url-pattern>  
</filter-mapping>  
  
<!-- 覆盖default servlet的/, springmvc servlet将处理原来处理静态资源的映射 -->  
<servlet-mapping>  
    <servlet-name>springmvc</servlet-name>  
    <url-pattern>/</url-pattern>  
</servlet-mapping>  
  
<!-- 浏览器不支持put,delete等method,由该filter将/blog?_method=delete转换为标准的http delete方法 -->  
<filter>  
    <filter-name>HiddenHttpMethodFilter</filter-name>  
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>  
</filter>  
  
<filter-mapping>  
    <filter-name>HiddenHttpMethodFilter</filter-name>  
    <servlet-name>springmvc</servlet-name>  
</filter-mapping>  
 
 
2. webapp/WEB-INF/springmvc-servlet.xml配置,使用如下两个class激活@RequestMapping annotation
Java代码  
<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>  
<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>  
 
完整配置
Java代码  
<beans default-autowire="byName"   >  
  
    <!-- 自动搜索@Controller标注的类 -->  
    <context:component-scan base-package="com.**.controller"/>  
      
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>  
  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>  
  
    <!-- Default ViewResolver -->  
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>  
        <property name="prefix" value="/pages"/>  
        <property name="suffix" value=".jsp"></property>  
    </bean>  
      
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="i18n/messages"/>  
  
    <!-- Mapping exception to the handler view -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <!-- to /commons/error.jsp -->  
        <property name="defaultErrorView" value="/commons/error"/>  
        <property name="exceptionMappings">  
            <props>  
            </props>  
        </property>  
    </bean>  
          
</beans>  
 
 
3. Controller编写
Java代码  
/** 
 * @RequestMapping("/userinfo") 具有层次关系，方法级的将在类一级@RequestMapping之一, 
 * 如下面示例, 访问方法级别的@RequestMapping("/new"),则URL为 /userinfo/new 
 */  
@Controller  
@RequestMapping("/userinfo")  
public class UserInfoController extends BaseSpringController{  
    //默认多列排序,example: username desc,createTime asc  
    protected static final String DEFAULT_SORT_COLUMNS = null;   
      
    private UserInfoManager userInfoManager;  
      
    private final String LIST_ACTION = "redirect:/userinfo";  
      
    /**  
     * 通过spring自动注入 
     **/  
    public void setUserInfoManager(UserInfoManager manager) {  
        this.userInfoManager = manager;  
    }  
      
    /** 列表 */  
    @RequestMapping  
    public ModelAndView index(HttpServletRequest request,HttpServletResponse response,UserInfo userInfo) {  
        PageRequest<Map> pageRequest = newPageRequest(request,DEFAULT_SORT_COLUMNS);  
        //pageRequest.getFilters(); //add custom filters  
          
        Page page = this.userInfoManager.findByPageRequest(pageRequest);  
        savePage(page,pageRequest,request);  
        return new ModelAndView("/userinfo/list","userInfo",userInfo);  
    }  
      
    /** 进入新增 */  
    @RequestMapping(value="/new")  
    public ModelAndView _new(HttpServletRequest request,HttpServletResponse response,UserInfo userInfo) throws Exception {  
        return new ModelAndView("/userinfo/new","userInfo",userInfo);  
    }  
      
    /** 显示 */  
    @RequestMapping(value="/{id}")  
    public ModelAndView show(@PathVariable Long id,HttpServletRequest request,HttpServletResponse response) throws Exception {  
        UserInfo userInfo = (UserInfo)userInfoManager.getById(id);  
        return new ModelAndView("/userinfo/show","userInfo",userInfo);  
    }  
      
    /** 编辑 */  
    @RequestMapping(value="/{id}/edit")  
    public ModelAndView edit(@PathVariable Long id,HttpServletRequest request,HttpServletResponse response) throws Exception {  
        UserInfo userInfo = (UserInfo)userInfoManager.getById(id);  
        return new ModelAndView("/userinfo/edit","userInfo",userInfo);  
    }  
      
    /** 保存新增 */  
    @RequestMapping(method=RequestMethod.POST)  
    public ModelAndView create(HttpServletRequest request,HttpServletResponse response,UserInfo userInfo) throws Exception {  
        userInfoManager.save(userInfo);  
        return new ModelAndView(LIST_ACTION);  
    }  
      
    /** 保存更新 */  
    @RequestMapping(value="/{id}",method=RequestMethod.PUT)  
    public ModelAndView update(@PathVariable Long id,HttpServletRequest request,HttpServletResponse response) throws Exception {  
        UserInfo userInfo = (UserInfo)userInfoManager.getById(id);  
        bind(request,userInfo);  
        userInfoManager.update(userInfo);  
        return new ModelAndView(LIST_ACTION);  
    }  
      
    /** 删除 */  
    @RequestMapping(value="/{id}",method=RequestMethod.DELETE)  
    public ModelAndView delete(@PathVariable Long id,HttpServletRequest request,HttpServletResponse response) {  
        userInfoManager.removeById(id);  
        return new ModelAndView(LIST_ACTION);  
    }  
  
    /** 批量删除 */  
    @RequestMapping(method=RequestMethod.DELETE)  
    public ModelAndView batchDelete(@RequestParam("items") Long[] items,HttpServletRequest request,HttpServletResponse response) {  
          
        for(int i = 0; i < items.length; i++) {  
              
            userInfoManager.removeById(items[i]);  
        }  
        return new ModelAndView(LIST_ACTION);  
    }  
      
}  
 
 
上面是rapid-framework 新版本生成器生成的代码,以后也将应用此规则,rest url中增删改查等基本方法与Controller的方法映射规则
Java代码  
/userinfo           => index()  
/userinfo/new       => _new()  
/userinfo/{id}      => show()  
/userinfo/{id}/edit         => edit()  
/userinfo   POST        => create()  
/userinfo/{id}  PUT => update()  
/userinfo/{id}  DELETE  => delete()  
/userinfo   DELETE      => batchDelete()  
 注(不使用 /userinfo/add  => add() 方法是由于add这个方法会被maxthon浏览器当做广告链接过滤掉,因为包含ad字符)
 
4. jsp 编写
Html代码  
<form:form action="${ctx}/userinfo/${userInfo.userId}" method="put">  
</form:form>  
 生成的html内容如下, 生成一个hidden的_method=put,并于web.xml中的HiddenHttpMethodFilter配合使用，在服务端将post请求改为put请求
Java代码  
<form id="userInfo" action="/springmvc_rest_demo/userinfo/2" method="post">  
    <input type="hidden" name="_method" value="put"/>  
</form>  
 
另外一种方法是你可以使用ajax发送put,delete请求.
 
5. 静态资源的URL重写
   如上我们描述，现因为将default servlet映射至/static/的子目录，现我们访问静态资源将会带一个/static/前缀.
   如 /foo.gif, 现在访问该文件将是 /static/foo.gif.
   那如何避免这个前缀呢，那就是应用URL rewrite,现我们使用 http://tuckey.org/urlrewrite/, 重写规则如下
 
Xml代码  
<urlrewrite>  
    <!-- 访问jsp及jspx将不rewrite url,其它.js,.css,.gif等将重写,如 /foo.gif => /static/foo.gif -->  
    <rule>  
        <condition operator="notequal" next="and" type="request-uri">.*.jsp</condition>  
        <condition operator="notequal" next="and" type="request-uri">.*.jspx</condition>  
        <from>^(/.*\..*)$</from>  
        <to>/static$1</to>  
    </rule>  
</urlrewrite>  
   另笔者专门写了一个 RestUrlRewriteFilter来做同样的事件，以后会随着rapid-framework一起发布. 比这个更加轻量级.
 
“正常的HTTP”最少是有四种动作的“GET,POST,PUT,DELETE”,而"GET,POST"只是表单提交的方式，目前来说，我只知道用ajax去请求 - - ，楼上那个方法没试过就不要误导别人啦，我刚试了一下，不行的，会显示为GET方式
 
方法一：在初始化时保存ApplicationContext对象 new ClassPathXmlApplicationContext("applicationContext.xml").getBean("beanId");     
这种方式适用于采用Spring框架的独立应用程序，需要程序通过配置文件手工初始化Spring的配置信息。   

方法二：通过Spring提供的工具类获取ApplicationContext对象  
import org.springframework.web.context.support.WebApplicationContextUtils; 
ApplicationContext ac1 = WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext sc) 
ApplicationContext ac2 = WebApplicationContextUtils.getWebApplicationContext(ServletContext sc)     
ac1.getBean("beanId");     
ac2.getBean("beanId"); 
这种方式适合于采用Spring框架的B/S系统，
通过ServletContext对象获取ApplicationContext对象，然后在通过它获取需要的类实例。
上面两个工具方式的区别是，前者在获取失败时抛出异常，后者返回null。   

方法三：继承自抽象类ApplicationObjectSupport      
抽象类ApplicationObjectSupport提供getApplicationContext()方法，可以方便的获取到ApplicationContext。Spring初始化时，
会通过该抽象类的setApplicationContext(ApplicationContext context)方法将ApplicationContext 对象注入。  


方法四：继承自抽象类WebApplicationObjectSupport          
类似上面方法，调用getWebApplicationContext()获取WebApplicationContext   

方法五：实现接口ApplicationContextAware      
实现该接口的setApplicationContext(ApplicationContext context)方法，并保存ApplicationContext 对象。Spring初始化时，会通过该方法将ApplicationContext 对象注入。   

总结：系统中用到上述方法的类实际上就于Spring框架紧密耦合在一起了，因为这些类是运行在Spring框架上的，因此，系统中，应该尽量的减少这类应用，
使系统尽可能的独立于当前运行环境。
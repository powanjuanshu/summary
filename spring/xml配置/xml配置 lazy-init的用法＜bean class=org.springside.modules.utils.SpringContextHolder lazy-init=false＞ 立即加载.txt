 lazy-init="false" 立退加载， 表示spring启动时，立刻进行实例化。
（lazy-init 设置只对scop属性为singleton的bean起作用）
--
<!--以静态变量保存ApplicationContext-->
<bean class="org.springside.modules.utils.SpringContextHolder" lazy-init="false"/>
---
ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化（也就是依赖注入）。提前实例化意味着作为初始化过程的一部分，
ApplicationContext实例会创建并配置所有的singleton bean。通常情况下这是件好事，因为这样在配置中的任何错误就会即刻被发现（否则的话可能要花几个小时甚至几天）。
<bean id="testBean" class="com.fhx.TestBean"> 该bean默认的设置为：
<bean id="testBean" class="com.fhx.TestBean" lazy-init="false">lazy-init="false"立退加载,表示spring启动时，立刻进行实例化。
（lazy-init 设置只对scop属性为singleton的bean起作用）
有时候这种默认处理可能并不是你想要的。如果你不想让一个singleton bean在ApplicationContext实现在初始化时被提前实例化，那么可以将bean设置为延迟实例化。
<bean id="testBean" class="com.fhx.TestBean" lazy-init="true">,lazy-init="true">延迟加载,设置为lazy的bean将不会在ApplicationContext启动时提前被实例化，而是在第一次向容器通过getBean索取bean时实例化的。
如果一个设置了立即加载的bean1,引用了一个延迟加载的bean2,那么bean1在容器启动时被实例化，而bean2由于被bean1引用，所以也被实例化，
这种情况也符合延迟加载的bean在第一次调用时才被实例化的规则。
在容器层次中通过在<beans/>元素上使用'default-lazy-init'属性来控制延迟初始化也是可能的。如下面的配置：
<beans default-lazy-init="true"><!-- no beans will be eagerly pre-instantiated... --></beans>
如果一个bean的scope属性为scope=“pototype“时，即使设置了lazy-init="false"，容器启动时不实例化bean，而是调用getBean方法是实例化的
另外加以说明:.init-method属性指定初始化时执行的方法，distory-method属性指定bean销毁时执行的方法。





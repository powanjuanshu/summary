new关键字做了什么
在JavaScript中，使用new关键字后，意味着做了如下四件事情：

创建一个新的对象，这个对象的类型是object；
设置这个新的对象的内部、可访问性和[[prototype]]属性为构造函数（指prototype.construtor所指向的构造函数）中设置的；
执行构造函数，当this关键字被提及的时候，使用新创建的对象的属性；
返回新创建的对象（除非构造方法中返回的是‘无原型’）。
在创建新对象成功之后，如果调用一个新对象没有的属性的时候，JavaScript会延原型链向止逐层查找对应的内容。这类似于传统的‘类继承’。

注意：在第二点中所说的有关[[prototype]]属性，只有在一个对象被创建的时候起作用，比如使用new关键字、使用Object.create、基于字面意义的（函数默认为Function.prototype，数字默认为Number.prototype等）。它只能被Object.getPrototypeOf(someObject)所读取。没有其他任何方式来设置或读取这个值。
----------------------------------
<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>center</title>
	<script type="text/javascript" src="content/jquery/jquery-1.9.1.js"></script>
	<script type="text/javascript">

	var a = function() {}
	a.b=function() {//第一种只能是当前对象实例才有该方法， 静态方法
	    alert(1);
	}
	a.prototype.c=function(){//第二种 每个对象的实例都有该方法，实例方法
	    alert(2);
	}
	a.b(); //1
	var abc = new a();
	abc.c() //2
	abc.b() //报错,因为a的实例中没有方法b
	</script>
	
  </head>
  <body>
  	<input type="button" value="send" onclick="partake.getPartakeList()"/>
  </body>
</html>
----------------------------------






一、constructor
constructor的值是一个函数。在JavaScript中，除了null和undefined外的类型的值、数组、函数以及对象，都有一个constructor属性，constructor属性的值是这个值、数组、函数或者对象的构造函数。如：
var a = 12, // 数字
    b = 'str', // 字符串
    c = false, // 布尔值
    d = [1, 'd', function() { return 5; }], // 数组
    e = { name: 'e' }, // 对象
    f = function() { return 'function'; }; // 函数
console.log('a: ', a.constructor); // Number()
console.log('b: ', b.constructor); // String()
console.log('c: ', c.constructor); // Boolean()
console.log('d: ', d.constructor); // Array()
console.log('e: ', e.constructor); // Object()
console.log('f: ', f.constructor); // Function()
以上的构造函数都是JavaScript内置的，我们也可以自定义构造函数，如：
function A(name) {
    this.name = name;
}
var a = new A('a');
console.log(a.constructor); // A(name)
调用构造函数时，需要用new关键字，构造函数返回的是一个对象，看下面的代码就知道了：
var a = 4;
var b = new Number(4);
console.log('a: ', typeof a); // a: number
console.log('b: ', typeof b); // b: object

二、 prototype
prototype是函数的一个属性，默认情况下，一个函数的prototype属性的值是一个与函数同名的空对象，匿名函数的prototype属性名为Object。如：
复制代码 代码如下:
function fn() {}

console.log(fn.prototype); // fn { }
prototype属性主要用来实现JavaScript中的继承，如：
复制代码 代码如下:
function A(name) {
    this.name = name;
}

A.prototype.show = function() {
    console.log(this.name);
};

function B(name) {
    this.name = name;
}

B.prototype = A.prototype;

var test = new B('test');

test.show(); // test
这儿有一个问题，test的构造函数其实是A函数而不是B函数：
复制代码 代码如下:
console.log(test.constructor); // A(name)


这是因为B.prototype = A.prototype把B.prototype的构造函数改成了A，所以需要还原B.prototype的构造函数：
复制代码 代码如下:
function A(name) {
    this.name = name;
}

A.prototype.show = function() {
    console.log(this.name);
};

function B(name) {
    this.name = name;
}

B.prototype = A.prototype;
B.prototype.constructor = B;

var test = new B('test');

test.show(); // test
console.log(test.constructor); // B(name)
之所以要这么做，是因为prototype的值是一个对象，且它的构造函数也就是它的constructor属性的值就是它所在的函数，即:
console.log(A.prototype.constructor === A); // true
------------------------------------
Javascript 面向对象编程（一）：封装
作者：阮一峰
Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。
那么，如果我们要把"属性"（property）和"方法"（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？
一、 生成对象的原始模式
假定我们把猫看成一个对象，它有"名字"和"颜色"两个属性。
　　var Cat = {
　　　　name : '',
　　　　color : ''
　　}
现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。
　　var cat1 = {}; // 创建一个空对象
　　　　cat1.name = "大毛"; // 按照原型对象的属性赋值
　　　　cat1.color = "黄色";
　　var cat2 = {};
　　　　cat2.name = "二毛";
　　　　cat2.color = "黑色";
好了，这就是最简单的封装了，把两个属性封装在一个对象里面。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。
二、 原始模式的改进
我们可以写一个函数，解决代码重复的问题。
　　function Cat(name,color){
　　　　return {
　　　　　　name:name,
　　　　　　color:color
　　　　}
　　}
然后生成实例对象，就等于是在调用函数：
　　var cat1 = Cat("大毛","黄色");
　　var cat2 = Cat("二毛","黑色");
这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。
三、 构造函数模式
为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。
所谓"构造函数"，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。
比如，猫的原型对象现在可以这样写，
　　function Cat(name,color){
　　　　this.name=name;
　　　　this.color=color;
　　}
我们现在就可以生成实例对象了。
　　var cat1 = new Cat("大毛","黄色");
　　var cat2 = new Cat("二毛","黑色");
　　alert(cat1.name); // 大毛
　　alert(cat1.color); // 黄色
这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。
　　alert(cat1.constructor == Cat); //true
　　alert(cat2.constructor == Cat); //true
Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。
　　alert(cat1 instanceof Cat); //true
　　alert(cat2 instanceof Cat); //true
四、构造函数模式的问题
构造函数方法很好用，但是存在一个浪费内存的问题。
请看，我们现在为Cat对象添加一个不变的属性"type"（种类），再添加一个方法eat（吃老鼠）。那么，原型对象Cat就变成了下面这样：
　　function Cat(name,color){
　　　　this.name = name;
　　　　this.color = color;
　　　　this.type = "猫科动物";
　　　　this.eat = function(){alert("吃老鼠");};
　　}
还是采用同样的方法，生成实例：
　　var cat1 = new Cat("大毛","黄色");
　　var cat2 = new Cat ("二毛","黑色");
　　alert(cat1.type); // 猫科动物
　　cat1.eat(); // 吃老鼠
表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。
　　alert(cat1.eat == cat2.eat); //false
能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。
五、 Prototype模式
Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。
这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。
　　function Cat(name,color){
　　　　this.name = name;
　　　　this.color = color;
　　}
　　Cat.prototype.type = "猫科动物";
　　Cat.prototype.eat = function(){alert("吃老鼠")};
然后，生成实例。
　　var cat1 = new Cat("大毛","黄色");
　　var cat2 = new Cat("二毛","黑色");
　　alert(cat1.type); // 猫科动物
　　cat1.eat(); // 吃老鼠
这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。
　　alert(cat1.eat == cat2.eat); //true
六、 Prototype模式的验证方法
为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。，
6.1 isPrototypeOf()
这个方法用来判断，某个proptotype对象和某个实例之间的关系。
　　alert(Cat.prototype.isPrototypeOf(cat1)); //true
　　alert(Cat.prototype.isPrototypeOf(cat2)); //true
6.2 hasOwnProperty()
每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。
　　alert(cat1.hasOwnProperty("name")); // true
　　alert(cat1.hasOwnProperty("type")); // false
6.3 in运算符
in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。
　　alert("name" in cat1); // true
　　alert("type" in cat1); // true
in运算符还可以用来遍历某个对象的所有属性。
　　for(var prop in cat1) { alert("cat1["+prop+"]="+cat1[prop]); }

























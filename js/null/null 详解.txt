一时间不好回答，特别是undefined，因为这涉及到undefined的实现原理。于是，细想之后，写下本文，请各位大侠拍砖。
总所周知：null == undefined
但是：null !== undefined
那么这两者到底有啥区别呢？
请听俺娓娓道来...
null
这是一个对象，但是为空。因为是对象，所以 typeof null 返回 'object' 。
null 是 JavaScript 保留关键字。
null 参与数值运算时其值会自动转换为 0 ，因此，下列表达式计算后会得到正确的数值：
表达式：123 + null　　　　结果值：123
表达式：123 * null　　　　结果值：0
undefined
undefined是全局对象（window）的一个特殊属性，其值是未定义的。但 typeof undefined 返回 'undefined' 。
虽然undefined是有特殊含义的，但它确实是一个属性，而且是全局对象（window）的属性。请看下面的代码：
复制代码 代码如下:

alert('undefined' in window);//输出：true
var anObj = {};
alert('undefined' in anObj); //输出：false

从中可以看出，undefined是window对象的一个属性，但却不是anObj对象的一个属性。
注意：尽管undefined是有特殊含义的属性，但却不是JavaScript的保留关键字。
undefined参与任何数值计算时，其结果一定是NaN。
随便说一下，NaN是全局对象（window）的另一个特殊属性，Infinity也是。这些特殊属性都不是JavaScript的保留关键字！
提高undefined性能
当我们在程序中使用undefined值时，实际上使用的是window对象的undefined属性。
同样，当我们定义一个变量但未赋予其初始值，例如：
var aValue;
这时，JavaScript在所谓的预编译时会将其初始值设置为对window.undefined属性的引用，
于是，当我们将一个变量或值与undefined比较时，实际上是与window对象的undefined属性比较。这个比较过程中，JavaScript会搜索window对象名叫‘undefined'的属性，然后再比较两个操作数的引用指针是否相同。
由于window对象的属性值是非常多的，在每一次与undefined的比较中，搜索window对象的undefined属性都会花费时 间。在需要频繁与undefined进行比较的函数中，这可能会是一个性能问题点。因此，在这种情况下，我们可以自行定义一个局部的undefined变 量，来加快对undefined的比较速度。例如：
复制代码 代码如下:

function anyFunc() {
var undefined;
//自定义局部undefined变量
if(x == undefined)
//作用域上的引用比较
while(y != undefined)
//作用域上的引用比较
};

其中，定义undefined局部变量时，其初始值会是对window.undefined属性值的引用。新定义的局部undefined变 量存在与该函数的作用域上。在随后的比较操作中，JavaScript代码的书写方式没有任何的改变，但比较速度却很快。因为作用域上的变量数量会远远少 于window对象的属性，搜索变量的速度会极大提高。
这就是许多前端JS框架为什么常常要自己定义一个局部undefined变量的原因！ 
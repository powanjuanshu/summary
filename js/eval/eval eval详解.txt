eval存在一个安全问题,因为它可以执行传给它的任何字符串,所以永远不要传入字符串或者来历不明和不受信任源的参数
eval涉及到安全问题.直接执行脚本注入.
解析json有其他方法,如jquery的parseJSON,或者浏览器自带的JSON对象,就web安全来说,eval稳当地是一个输出点,只要同时存在输入点,立即成为漏洞,没把握还是别乱用的好

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String path = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
%>
<html>
<head>
    <title></title>
    <script type="text/javascript" src="<%=path%>/js/jquery-1.8.3.min.js"></script>
    <script>
        $(function(){
            var s = "alert(123);";
            eval(s); // 打印: 123
        });
    </script>
</head>
</html>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String path = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
%>
<html>
<head>
    <title></title>
    <script type="text/javascript" src="<%=path%>/js/jquery-1.8.3.min.js"></script>
    <script>
        $(function() {
            var code1 = '"a" + 2';    		    // 表达式
            var code2 = '{a:2}';      		    // json语句
            alert(eval(code1));       		    // 打印:a2
            alert(eval(code2));       		    // 打印:undefined
            alert(eval('(' + code2 + ')'));         // 打印:[object Object]
            var str = 'function test(){return 1;}';
            eval(str);
            alert(test());    			    // 打印: error:test is not defined
        });
    </script>
</head>
</html>

[1] 前后台交互代码:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String path = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
%>
<html>
<head>
    <title></title>
    <script type="text/javascript" src="<%=path%>/js/jquery-1.8.3.min.js"></script>
    <script>
        $(function() {
            $("#btn").click(function(){
                $.ajax({
                    async : true,
                    url : "<%=path%>/fast/hello.do",
                    type : "post",
                    data : {uaername:123,password:321},
                    dataType : 'text',
                    success : function(data, textStatus) {
                        alert(data); 		// 打印:{"respCode":"0000","respDesc":"success"}
                        alert(data.respCode); 	// 打印undefined
                        var pars = eval("("+data+")");  // 解析json,经过测试所有的浏览器都可以试用 这里为什么要写()括号,不加会报错:缺少;的错
                        alert(pars); 			// 打印:[object Object]
                        alert(pars.respCode); 		// 打印:0000
                    },
                    cache : false,
                    timeout : 5000,
                    error : function(XMLHttpRequest, textStatus, errorThrown) {
                        $("#smsPrompt1").html("<font color='red'>发送失败</font>");
                    }
                });
            });
        });
    </script>
</head>
<body>
    <input type="button" value="dianj" id="btn">
</body>
</html>

package com.spdbccc.account.entry.action;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
@Controller
@RequestMapping(value = "fast")
@Scope("prototype")
public class FastPayAction {
    public FastPayAction() {
        System.out.println("fast pay action...");
    }
    @RequestMapping(value="hello.do",produces="text/html;charset=UTF-8")
    @ResponseBody
    public String helloWorld (@RequestParam Map<String,String> params, HttpServletRequest request, Map<String,Object> context) { // 得到request,得到上下文context,用户请求的参数可以自动放入params
        /*
        下午,调试jquery遇到了一个很奇葩的错误:JSON.parse expected property name or '}',就是jquery解析json的时候,不识别单引号,个人觉得这个错误其实应该在jquery中自己能够解决掉,不一定非得需要我们程序员自己解决.像extjs,easyUi等前台框架都已经开始识别单引号了.
        用jquery1.7.2时报JSON.parse expected property name or '}'的错误
        再仔细看了一下,哦,原来是json里的属性缺少了双引号.正确的写法应该是这样的{"success":true,"msg":"修改成功"}.
        最后在后台把参数添加上引号(注意java里在字符串中加双引号需要用到转义字符"\")
         */
        return "{\"respCode\":\"0000\",\"respDesc\":\"success\"}"; // json不能用单引号,必须用双引号,不然页面解析json时会报错,原因如上
    }
}

效率问题还是安全问题?为什么不建议使用.
我用jquery的ajax从后台返回的字符串都是通过eval解释,然后再转换成数组的,不用eval的话,怎么解释呢?
var jsonD = eval('(' + data.d + ')'); // 解析json对象

* eval()函数可计算某个字符串,并执行其中的的JavaScript代码.
* 语法
  eval(string)参数
  string必需.要计算的字符串,其中含有要计算的JavaScript表达式或要执行的语句.
* 返回值
  通过计算string得到的值(如果有的话).
* eval的用法:
  eval函数接收一个参数str,如果str不是字符串,则直接返回str.否则执行str语句.如果str语句执行结果是一个值,则返回此值,否则返回undefined.
  需要特别注意的是对象声明语法{}并不能返回一个值,需要用括号括起来才会返回值,简单示例如下:
    var code1 = '"a" + 2';    		// 表达式
    var code2 = '{a:2}';      		// 语句
    alert(eval(code1));       		// 打印:'a2'
    alert(eval(code2));       		// 打印:undefined
    alert(eval('(' + code2 + ')'));     // 打印:[object Object]
  无论是变量定义还是函数定义都是如此,所以如下的代码会产生函数未定义的错误:
    var s='function test(){return 1;}';
    function demo2(){
        eval(s);
    }
    demo2();
    alert(test());    // 打印: error:test is not defined

* 浏览器兼容问题(经过测试好像没有兼容问题):
  eval函数兼容IE和Firefox:
    var X2={};
    X2.Eval=function(code){
      if(!!(window.attachEvent && !window.opera)){
        execScript(code); // ie
      } else {
        window.eval(code); // not ie
      }
    }
    现在如果要想在函数内定义全局代码,就可以通过调用X2.Eval(code)方法:
    var s='global';
    function demo3(){
      X2.Eval('var s="local"');
    }
    demo3();
    alert(s); // 打印: local
  说明:
  该方法只接受原始字符串作为参数,如果 string 参数不是原始字符串,那么该方法将不作任何改变地返回.因此请不要为eval()函数传递String对象来作为参数.
  如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性,并通过该属性调用它,则 ECMAScript 实现允许抛出一个 EvalError 异常.

* IE当eval遇上function的处理
  + 情况1:eval里没有function,直接执行:
    eval("alert('ss');");//所有浏览器正确均输出
    情况2:eval里有function,function立即执行:
    eval("(function(){alert('ss');})();");//所有浏览器正确输出
  + 情况3:eval里有function,使用变量保存function引用并调用该function:
    var f=eval("(function(){alert('ss');})");
    f();//IE下报错:缺少对象 其他浏览器正常
    当在eval定义一个function并返回给变量时,IE报错:缺少对象.可见IE下eval里定义的function并不能成功返回到eval外部.
    解决方法:使function对象作为一个执行结果返回:
  + 方法1:
    var f=eval("(function(){ return function(){alert('ss');}})()");
    f();//所有浏览器正确输出
    eval里调用一个立即执行的函数,该函数执行之后返回一个function对象,此时该function对象的引用成功返回到外部变量.
  + 方法2:
    var f=eval("(false||function(){alert('ss');})");
    f();//所有浏览器成功输出
    该方法也是jquery里使用的方法,function作为或表达式的执行结果返回,同样能成功解决问题.当然,表达式并不局限于上面的false||function(){},各种表达式只要能成功返回function,均可解决问题:
  + 与表达式:
    var f=eval("(true&&function(){alert('ss');})");
    f();//所有浏览器正常输出
  + 三元表达式:
    var f=eval("(true?function(){alert('ss');}:'');");
    f();//所有浏览器正常输出















新一代的Web Services框架如Axis2,CXF都是由现有的项目中逐渐演化而来的,
Axis2是由大家熟悉的Axis 1.x系列演化过来,而cxf则是由Celtix和XFire项目整合而生. 

Axis2是对Axis进行了彻底的重写的一个新项目了,它使用了新的模块化架构,更方便于功能性的扩展等等. 

* 1、cxf支持WS-Addressing、WS-Policy、WS-RM、WS-Security和WS-I BasicProfile 
* 2、Axis2支持WS-Addressing、WS-RM、WS-Security和WS-I BasicProfile,WS-Policy将在新版本里得到支持 
* 3、cxf 是根据Spring哲学来进行编写的,即可以无缝地与Spring进行整合 
* 4、Axis2不是
* 5、Axis2支持更多的data bindings,包括XMLBeans、JiBX、JaxMe和JaxBRI,以及它原生的data binding(ADB). 
* 6、cxf 目前仅支持jaxb和aegis,并且默认是jaxb 2.0,与XFire默认是支持aegis不同,XMLBeans、JiBX 和Castor将在CXF 2.1版本中得到支持
* 7、Axis2 支持多种语言,它有 C/C++ 版本.
* 8、cxf提供方便的Spring整合方法,可以通过注解、Spring标签式配置来暴露Web Services和消费Web Services 

如何抉择:
1、如果应用程序需要多语言的支持,Axis2应当是首选了
2、如果应用程序是遵循Spring哲学路线的话,cxf 是一种更好的选择,特别对嵌入式的Web Services来说
3、如果应用程序没有新的特性需要的话,就仍是用原来项目所用的框架,比如Axis1,XFire,Celtrix或BEA等等厂家自己的Web Services实现,就别劳民伤财了

Axis和很多开源包使用的xml解析器都冲突,每次用都遇到问题,特别是再websphere下部署webservice就是恶梦.有时间看看CXF
是的,axis和jfreechart就有冲突.

注意:
* CXF的编程模型比AIXS2简单,而且在Stand alone的方式下执行效率比AXIS2要高很多.
* 如果你用java开发Web Services,那用jaxws api开发可以保证在大多数Web Services Framework上正常运行.
  还有就是如果你还是在使用RPC/Encoding的方式,axis1是唯一的选择.因为XFire,cxf,axis2都不支持RPC/Encoding的编码方式
  原因在于在jaxws规范中已经把RPC/Encoding的方式抛弃,因为这种编码方式的互操作性太差

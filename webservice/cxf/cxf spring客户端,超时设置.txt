--------------------------------
客户端:
spring-mvc.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws" 
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
		http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">
	<!--cxf引用的部分lib在jdk1.6不兼容，需要在jdk/jre/lib，新建文件夹：endorsed 且放置三个lib：jaxb-api-2.x.jar ,jaxb-impl-2.x.jar ,jaxb-xjc-2.x.jar-->
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	<!-- 如果没有<context:component-scan base-package="com"/>，则这里的id必须要和autowired的变量名相同，否则报错 -->
	<jaxws:client id="fuck1" serviceClass="com.neusoft.gazelle.core.webservice1.Fuck" address="http://localhost/xxx/cpic/JackAndRose"></jaxws:client>
	
	<!-- 对所有的服务生效 
	<http-conf:conduit name="*.http-conduit">  
    		<http-conf:client ConnectionTimeout="3000" ReceiveTimeout="3000"/>   
	</http-conf:conduit>
	-->
	
	<!-- 指定设置生效的服务 -->
	<http-conf:conduit name="http://localhost/xxx/cpic/JackAndRose/*">
    		<http-conf:client ConnectionTimeout="3000" ReceiveTimeout="3000"/>   
	</http-conf:conduit>
</beans>
--------------------------------
package com.neusoft.gazelle.core.webservice1;

import org.springframework.context.support.ClassPathXmlApplicationContext;


public class Main {
	public static void main(String[] args) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:/spring/spring-mvc.xml");
		Fuck say = (Fuck) context.getBean("fuck1");
		say.hi("xxx","yyy");
		
	}
}
--------------------------------
package com.neusoft.gazelle.core.webservice1;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
// 这个类的包名必须和服务器端的接口的包名相同，不然会报错，为什么?(解决 方法：将客户端中的Service的包名改成与服务端中的一致，问题解决)，或者targetName一致也可解决
@WebService(targetNamespace="http://webservice.core.gazelle.neusoft.com/")
// @WebService(endpointInterface = "com.mywebapp.ws.service.SomeService")中，加上一个属性 , targetNamespace="http://service.ws.mywebapp.com/"，这下问题就解决了。其中http://后面的是服务器端的接口包路径
public interface Fuck {
	@WebMethod(operationName="hi") // 可以省略
	public JackMode hi(@WebParam(name="jackInfo1")String jack1, @WebParam(name="jackInfo2")String jack2); // 可以省略@WebParam(name="jackInfo2"),如果省略了，name=arg0，参数会使用默认的args0
}
--------------------------------
package com.neusoft.gazelle.core.webservice1;
public class JackMode {
	private String username;
	private String password;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}
--------------------------------
服务端：
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>AnalysisTool</display-name>
	<description>Welcome to CPIC Analysis Tool.</description>
	<!--spring applicationcontext载入-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/applicationContext-webservice.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!--sessin的超时配置-->
	<session-config>
		<session-timeout>180</session-timeout>
	</session-config>
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/cpic/*</url-pattern>
	</servlet-mapping>
</web-app>
--------------------------------
applicationContext-webservice.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
		http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">
	
	<!--cxf引用的部分lib在jdk1.6不兼容，需要在jdk/jre/lib，新建文件夹：endorsed 且放置三个lib：jaxb-api-2.x.jar ,jaxb-impl-2.x.jar ,jaxb-xjc-2.x.jar-->
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	
	<bean id="helloInInterceptor" class="com.neusoft.gazelle.core.webservice.interceptor.HelloInInterceptor"/>
	<bean id="sampleInterceptor" class="com.neusoft.gazelle.core.webservice.interceptor.SampleInterceptor"/>
   <bean id="demoOutInterceptor" class="com.neusoft.gazelle.core.webservice.interceptor.DemoOutInterceptor"/>  
	
	<!--发布WebService接口-->
	<!--id:名称随意配，implementor:指定接口具体实现类，address:随意配-->
	<jaxws:endpoint id="jackAn" implementor="com.neusoft.gazelle.core.webservice.FuckImpl" address="/JackAndRose">
		<jaxws:inInterceptors>
			<ref bean="sampleInterceptor"/>
			<ref bean="helloInInterceptor"/>
			<ref bean="demoOutInterceptor"/>
		</jaxws:inInterceptors>
	</jaxws:endpoint>
</beans>
--------------------------------
package com.neusoft.gazelle.core.webservice;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
@WebService(targetNamespace="http://webservice.core.gazelle.neusoft.com/") // 不写targetNamnespace，则默认为包名
// 这个类的客户端包名必须和服务器端的接口的包名相同，不然会报错，为什么?(解决 方法：将客户端中的Service的包名改成与服务端中的一致，问题解决)，或者targetName一致也可解决
public interface Fuck {
	@WebMethod(operationName="hi") // 可以省略
	public JackMode hi(@WebParam(name="jackInfo1")String jack1, @WebParam(name="jackInfo2")String jack2); // 可以省略@WebParam(name="jackInfo2"),如果省略了，name=arg0，参数会使用默认的args0
}
--------------------------------
package com.neusoft.gazelle.core.webservice;
import java.util.Date;

import javax.jws.WebService;
@WebService(serviceName="HelloGT",endpointInterface="com.neusoft.gazelle.core.webservice.Fuck")
public class FuckImpl implements Fuck {
	@Override
	public JackMode hi(String jack1, String jack2) {
		System.out.println("jack1:" + jack1);
		System.out.println("jack2:" + jack2);
		System.out.println("start:" + new Date().toLocaleString());
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("end:" + new Date().toLocaleString());
		JackMode model=new JackMode();
		model.setPassword("aaa");
		model.setUsername("bbb");
		return model;
	}
}
--------------------------------
package com.neusoft.gazelle.core.webservice;

public class JackMode {
	private String username;
	private String password;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}
--------------------------------
package com.neusoft.gazelle.core.webservice.interceptor;

import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;

public class DemoOutInterceptor extends AbstractPhaseInterceptor<Message> {

	public DemoOutInterceptor(String phase) {
		super(phase);
	}
	
	public DemoOutInterceptor() {
		super(Phase.POST_INVOKE);
	}

	@Override
	public void handleMessage(Message message) throws Fault {
		System.out.println("kkkkk");
		System.out.println("kkkkk:" + message);
	}
}

--------------------------------
package com.neusoft.gazelle.core.webservice.interceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;

public class HelloInInterceptor extends AbstractPhaseInterceptor<Message> {
	
	public HelloInInterceptor(String phase) {
		super(phase);
	}
	
	public HelloInInterceptor() {
		super(Phase.RECEIVE);
	}
	
	public void handleMessage(Message message) throws Fault {
		System.out.println("xxxxx");
		System.out.println("xxxxx:" + message.toString());
	}
}
-----------------------------
package com.neusoft.gazelle.core.webservice.interceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;

public class SampleInterceptor extends AbstractPhaseInterceptor<Message> {
	
	public SampleInterceptor(String phase) {
		super(phase);
	}
	
	public SampleInterceptor() {
		super(Phase.PRE_INVOKE);
	}
	
	public void handleMessage(Message message) throws Fault {
		System.out.println("hhhhh");
		System.out.println("hhhhh:" + message.toString());
	}
}
-----------------------------
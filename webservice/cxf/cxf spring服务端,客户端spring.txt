服务端：
-------------------------------------------------------
package com.neusoft.gazelle.core.webservice;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
@WebService
public interface Fuck {
	@WebMethod(operationName="hi") // 可以省略
	public JackMode hi(@WebParam(name="jackInfo1")String jack1, @WebParam(name="jackInfo2")String jack2); // 可以省略@WebParam(name="jackInfo2"),如果省略了，name=arg0，参数会使用默认的args0
}
-------------------------------------------------------
package com.neusoft.gazelle.core.webservice;
import javax.jws.WebService;
@WebService(serviceName="HelloGT",endpointInterface="com.neusoft.gazelle.core.webservice.Fuck")
public class FuckImpl implements Fuck {
	@Override
	public JackMode hi(String jack1, String jack2) {
		System.out.println("jack1:" + jack1);
		System.out.println("jack2:" + jack2);
		JackMode model=new JackMode();
		model.setPassword("aaa");
		model.setUsername("bbb");
		return model;
	}
}
-------------------------------------------------------
package com.neusoft.gazelle.core.webservice;
public class JackMode {
	private String username;
	private String password;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}
-------------------------------------------------------
package com.neusoft.gazelle.core.webservice;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;
@SuppressWarnings("rawtypes")
public class SampleInterceptor extends AbstractPhaseInterceptor {
	public SampleInterceptor(String sss) {
		super(Phase.PRE_INVOKE);
	}
	public void handleMessage(Message message) throws Fault {
		System.out.println("xxxxx");
		System.out.println(message.toString());
	}
}
-------------------------------------------------------
applicationContext-webservice.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
	<!--cxf引用的部分lib在jdk1.6不兼容，需要在jdk/jre/lib，新建文件夹：endorsed 且放置三个lib：jaxb-api-2.x.jar ,jaxb-impl-2.x.jar ,jaxb-xjc-2.x.jar-->
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	<bean id="inMessageInterceptor" class="com.neusoft.gazelle.core.webservice.SampleInterceptor"> 
		<constructor-arg value="receive"/> 
	</bean>
	<!--发布WebService接口-->
	<!--id:名称随意配，implementor:指定接口具体实现类，address:随意配-->
	<jaxws:endpoint id="jackAn" implementor="com.neusoft.gazelle.core.webservice.FuckImpl" address="/JackAndRose">
		<jaxws:inInterceptors> 
			<ref bean="inMessageInterceptor"/>
		</jaxws:inInterceptors>
	</jaxws:endpoint>
</beans>
-------------------------------------------------------
web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>AnalysisTool</display-name>
	<description>Welcome to CPIC Analysis Tool.</description>
	<!--spring applicationcontext载入-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/applicationContext-webservice.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!--sessin的超时配置-->
	<session-config>
		<session-timeout>180</session-timeout>
	</session-config>
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/cpic/*</url-pattern>
	</servlet-mapping>
</web-app>
-------------------------------------------------------
客户端：
package com.neusoft.gazelle.core.webservice;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
/**
 * 根据代码，我们知道还需要新建一个IHelloWorld接口，这是服务器端暴露的服务，
 * 我们还需要在客户端再新建一个以利用之，代码和服务器端一致即可，不再赘述。
 * 此接口必须和服务端的接口一模一样
 */
//这个类的包名必须和服务器端的接口的包名相同，不然会报错，为什么?(解决 方法：将客户端中的Service的包名改成与服务端中的一致，问题解决)，或者targetName一致也可解决
//@WebService(targetNamespace="http://webservice.core.gazelle.neusoft.com/")
//@WebService(endpointInterface = "com.mywebapp.ws.service.SomeService")中，加上一个属性 , targetNamespace="http://service.ws.mywebapp.com/"，这下问题就解决了。其中http://后面的是服务器端的接口包路径

@WebService
public interface Fuck {
	@WebMethod(operationName="hi") // 可以省略
	public JackMode hi(@WebParam(name="jackInfo1")String jack1, @WebParam(name="jackInfo2")String jack2); // 可以省略@WebParam(name="jackInfo2"),如果省略了，name=arg0，参数会使用默认的args0
}
-------------------------------------------------------
package com.neusoft.gazelle.core.webservice;
public class JackMode {
	private String username;
	private String password;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}
-------------------------------------------------------
package com.action;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;
import com.neusoft.gazelle.core.webservice.Fuck;
import com.opensymphony.xwork2.ActionSupport;
@Results({
	@Result(name = "allInfo",type="dispatcher" ,location="/area/listAllInfo.jsp"),
	@Result(name = "search",type="dispatcher" ,location="/area/search.jsp")
})
public class ListAllInfoAction extends ActionSupport {
	private static final long serialVersionUID = 2947879915687147415L;

	@Autowired
	private Fuck fuck;
	
	@Action(value="goAllInfo")
	public void goAllInfo(){
		System.out.println("xxxssss");
		fuck.hi("111", "333");
	}

	public Fuck getFuck() {
		return fuck;
	}

	public void setFuck(Fuck fuck) {
		this.fuck = fuck;
	}
}
-------------------------------------------------------
applicationContext-webservice.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
	<!--cxf引用的部分lib在jdk1.6不兼容，需要在jdk/jre/lib，新建文件夹：endorsed 且放置三个lib：jaxb-api-2.x.jar ,jaxb-impl-2.x.jar ,jaxb-xjc-2.x.jar-->
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	<!-- 如果没有<context:component-scan base-package="com"/>，则这里的id必须要和autowired的变量名相同，否则报错 -->
	<jaxws:client id="fuck1" serviceClass="com.neusoft.gazelle.core.webservice.Fuck" address="http://localhost/xxx/cpic/JackAndRose">
   </jaxws:client>
</beans>
-------------------------------------------------------
applicationContext.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	<description>Spring公共配置</description>
	<!--使用annotation自动注册bean，并保证@Required,@Autowired的属性被注入-->
	<context:component-scan base-package="com"/>
</beans>
-------------------------------------------------------
web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>AnalysisTool</display-name>
	<description>Welcome to CPIC Analysis Tool.</description>
	<!--spring applicationcontext载入-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/applicationContext.xml,classpath*:/applicationContext-webservice.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!--struts filter-->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>  
	</filter>
    
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.action</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.jsp</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<!--sessin的超时配置-->
	<session-config>
		<session-timeout>180</session-timeout>
	</session-config>
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/cpic/*</url-pattern>
	</servlet-mapping>
</web-app>
-------------------------------------------------------
struts.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
	<constant name="struts.convention.default.parent.package" value="default" />
	<constant name="struts.convention.package.locators.basePackage" value="com" />
	<constant name="struts.convention.action.name.separator" value="-" />  
	<constant name="struts.convention.result.path" value="/" /> 
	<constant name="struts.convention.action.mapAllMatches" value="true"/>
   	<!-- struts的URL扩展名 -->
 	<constant name="struts.action.extension" value="action,do" />
 	<!-- 允许访问静态成员变量 -->
 	<constant name="struts.ognl.allowStaticMethodAccess" value="true" />
   	<constant name="struts.enable.DynamicMethodInvocation" value="true" />
   	<constant name="struts.enable.SlashesInActionNames" value="true" />
	<package name="default" extends="struts-default" namespace="/" />
</struts>
-------------------------------------------------------






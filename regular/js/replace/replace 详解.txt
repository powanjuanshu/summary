<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>center</title>
	<script type="text/javascript" src="content/jquery/jquery-1.9.1.js"></script>
  </head>
  <body>
  	<input type="button" value="send" onclick="partake.getPartakeList()"/>
  </body>
	<script type="text/javascript">
	String.prototype.capitalize = function() {
		return this.replace( /(^|\s)([a-z])/g, 
				function(m,p1,p2){
					return p1+p2.toUpperCase();
				})
	};
	var upc = "i am a boy !".capitalize();
	alert(upc);//打出:I Am A Boy !
	</script>
</html>
---------------------------------
JavaScript 函数replace深入了解

在JavaScript中replace函数作为字符串替换函数,这是一个威力强大的字符串操作函数,对于常见字符串操作的推荐用法.

replace函数接受两个参数,第一个参数为字符串或正则表达式,第一个参数同样可以接受一个字符串,还可能是一个函数.
首先对于第一个参数为字符串的我们不再需要多说"I am a boy".replace("boy","girl"),输出："I am a girl".在这里想说的是第一个参数为正则的情形.
对于正则表达式来说首先会根据是否全局的(全局//g)决定替换行为,如果是全部的则替换全部替换,非全局的只有替换首个匹配的字符串.例如：

"Ha Ha".replace(/\b\w+\b/g, "He")  // He He 

"Ha Ha".replace(/\b\w+\b/, "He")  //He Ha

1:第二个参数为字符串：对于正则replace约定了一个特殊标记符$：

1.$i (i:1-99) : 表示从左到右正则子表达式所匹配的文本.
2.$&:表示与正则表达式匹配的全文本.
3.$`(`:切换技能键)：表示匹配字符串的左边文本.
4.$'(‘:单引号)：表示匹配字符串的右边文本.
5.$$：表示$转移.

"boy & girl".replace(/(\w+)\s*&\s*(\w+)/g,"$2 & $1") //girl & boy 

"boy".replace(/\w+/g,"$&-$&") // boy-boy 

"javascript".replace(/script/,"$& != $`") //javascript != java 

"javascript".replace(/java/,"$&$' is ") // javascript is script

2：第二个参数为函数：在ECMAScript3推荐使用函数方式,实现于JavaScript1.2.当replace方法执行的时候每次都会调用该函数,返回值作为替换的新值.
函数参数的规定：
1.第一个参数为每次匹配的全文本($&).
2.中间参数为子表达式匹配字符串,个数不限.( $i (i:1-99))
3.倒数第二个参数为匹配文本字符串的匹配下标位置.
4.最后一个参数表示字符串本身.

这就是本文所要说replace威力强大的地方,理论的东西都是干货,我们需要示例解决一切空洞的问题：
1：字符串首字母大写：
String.prototype.capitalize = function(){
    	return this.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();
    });
};
console.log("i am a boy !".capitalize())
输出：I Am A Boy !

2:对字符串“张三56分, 李四74分, 王五92分, 赵六84分”的分数提取汇总,算出平均分并输出每个人的平均分差距.

var s = "张三56分, 李四74分, 王五92分, 赵六84分";
var a = s.match(/\d+/g);
var sum = 0;
for(var i = 0 ; i < a.length; i++){
            sum += parseFloat(a[i]);
}
var avg = sum / a.length;
function f(){ 
	var n = parseFloat(arguments[1]); 
	return n + "分" + "(" + ((n > avg) ? ("超出平均分" + (n - avg)) : ("低于平均分" + (avg - n))) + "分)";
}
var result = s.replace(/(\d+)分/g, f);
console.log(result);
输出：
张三56分(低于平均分20.5分), 李四74分(低于平均分2.5分), 王五92分(超出平均分15.5分), 赵六84分(超出平均分7.5分)
JavaScript的replace函数再加上正则的高级应用,JavaScript的replace将会发回更大的威力所在,在这里将不再深入正则高级应用断言之类的.
---------------------------------
这里要重点说的，是String对象的 replace(regex,function(args){}) 这种形式！我们需要搞清楚args到底是一个什么样的参数列表！假设我们的测试case是这样的：
var replaceTime = 0;
string.replace(regex,function(){
    console.log("============第" + ++replaceTime + "次匹配替换============");
    for(var i = 0,argLength = arguments.length;i < argLength;i++) {
        console.log("第" + (i + 1) + "个参数内容 = " + arguments[i]);
    }
});

1、假设regex=/bc/g，string="abcabcabc"；用测试case得到的结果是这样的：

所以，基本上可以得到一个初步的结论：第一个参数是通过regex匹配出来的结果，第二个参数是匹配结果在string中的索引位置，第三个参数是string字符串本身。于是，我们可以把测试case改成这样来验证一下：
var replaceTime = 0;
string.replace(regex,function(result,index,orignalString) {
    console.log("=============第" + ++replaceTime + "次匹配替换============");
    console.log("第1个参数内容 = " + result);
    console.log("第2个参数内容 = " + index);
    console.log("第3个参数内容 = " + orignalString);
});
确实，验证的结果完全正确。

2、假设regex=/b(c)/g，string="abcabcabc"；用测试case得到的结果是这样的：
同样的，也能得出这样一个结论：第一个参数是通过regex这个完整的正则匹配出来的结果，第二个参数是regex中分组“(c)”所产生的结果，第三个参数是匹配结果在string中的索引位置，第四个参数是string字符串本身。

3、假设regex=/(b)(c)g/，string="abcabcabc"；用测试case得到的结果是这样的：
同样的，也能得出结论：第一个参数是通过regex这个完整的正则匹配出来的结果，第二个参数是regex中分组“(b)”所产生的结果，第三个参数是regex中分组“(c)”所产生的结果，第四个参数是匹配结果在string中的索引位置，第四个参数是string字符串本身。

同理，通过不断的更改regex和string，利用测试case得到的结论都是一致的。所以可以搞清楚Javascript中，String对象的 replace(regex,function(){}) 方法中，参数列表的意义是这样的：

第一个参数在regex这个完整的正则匹配出来的结果
倒数第二个参数是第一个参数（匹配结果）在输入字符串中的索引位置
最后一个参数是输入字符串本身
如果regex中存在分组，那么参数列表的长度N>3一定成立，且第2到N-2个参数，分别为regex中分组所产生的匹配结果

当然，我们也可以从MDN-Javascript-String板块找到一样的参考：
真正开发中，我们关心的一般都是第一个（通过 arguments[0] 获得）和倒数第二个（通过 arguments[arguments.length - 2] 获得）。有时候能把一些基础的东西琢磨透，更能在开发中提高效率！





























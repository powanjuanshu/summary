* (?!pattern)执行反向预测先行搜索的子表达式,该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串.
* 它是一个非捕获匹配,即不能捕获供以后使用的匹配.例如,"Windows (?!95| 98| NT| 2000)"与"Windows 3.1"中的"Windows"匹配,但不与"Windows 2000"中的"Windows"匹配.
* 预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.
* (?!exp)代表一个位置,而不是字符
* (?!exp)表示正则表达式中的零宽断言,匹配后面跟的不是exp的位置
* abc(?!xy2)也就是匹配abcaakjdf，abc2xy2等abc后面不是xy2的字符串
--------------------------
package com.ccbsh;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class EEE {
	public static void main(String[] args) {
		String inputStr = "abcxixabcyabcxyabcxy2";
		Pattern p = Pattern.compile("abc(?!xy2)");
		Matcher m = p.matcher(inputStr);
		String ret = m.replaceAll("ppp");
		System.out.println(ret); // 打印pppxixpppypppxyabcxy2
	}
}
-------------------------
package com.ccbsh;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Test2 {
	public static void main(String[] args) {
		Pattern p = Pattern.compile("abc(?!def)");
		Matcher m = p.matcher("abcuioabctreabchgabck");
		while(m.find()){
			System.out.println(m.group()); // 会打印四次abc,表明可以匹配多次
		}
	}
}
-------------------------
package com.ccbsh;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Test {
	public static void main(String[] args) throws Exception {
		// (?!pattern)算是[^]的扩展(因为[^pattern]是p,a,t,t,e,r,n都不能出现)
		Pattern p = Pattern.compile("hum_(?!jack)");
		String str ="hum_jac";
		Matcher m = p.matcher(str);
		while(m.find()) {
			System.out.println(m.group()); // 输出hum_
		}
	}
}
-------------------
package com.ccbsh;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Test {
	public static void main(String[] args) throws Exception {
		Pattern p = Pattern.compile("(?<=<td>).*(?=</td>)");
		String str ="<td>20分钟</td>";
		Matcher m = p.matcher(str);
		while(m.find()) {
			System.out.println(m.group()); // 打印20分钟
		}
	}
}







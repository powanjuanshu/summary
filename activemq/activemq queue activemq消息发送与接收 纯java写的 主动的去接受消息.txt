发送端：
package activeMQ;
import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnectionFactory;
public class Test {
	public static void main(String[] args) {
		try {
			//创建一个连接工厂
			String url="tcp://localhost:61616";
			ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(url);//ConnectionFactory connectionFactory=new ActiveMQConnectionFactory();这样写也可以的
			//设置用户名和密码，这个用户名和密码在conf目录下的credentials.properties文件中，也可以在activemq.xml中配置
			connectionFactory.setUserName("system");
			connectionFactory.setPassword("manager");
			Connection connection=connectionFactory.createConnection();
			connection.start();
			//创建Session，参数解释：
            		//第一个参数是否使用事务:当消息发送者向消息提供者（即消息代理）发送消息时，消息发送者等待消息代理的确认，没有回应则抛出异常，消息发送程序负责处理这个错误。
            		//第二个参数消息的确认模式：
            		//AUTO_ACKNOWLEDGE：指定消息提供者在每次收到消息时自动发送确认。消息只向目标发送一次，但传输过程中可能因为错误而丢失消息。
            		//CLIENT_ACKNOWLEDGE： 由消息接收者确认收到消息，通过调用消息的acknowledge()方法（会通知消息提供者收到了消息）
           		//DUPS_OK_ACKNOWLEDGE： 指定消息提供者在消息接收者没有确认发送时重新发送消息（这种确认模式不在乎接收者收到重复的消息）。
			Session session=connection.createSession(Boolean.TRUE,Session.AUTO_ACKNOWLEDGE);
			//创建目标，就创建主题也可以创建队列
			Destination destination=  session.createQueue("my-queue");
			//创建消息生产者
			MessageProducer producer=session.createProducer(destination);
			// 设置持久化，DeliveryMode.PERSISTENT和DeliveryMode.NON_PERSISTENT
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			for(int i=0;i<10;i++){
				// 创建消息
				TextMessage message = session.createTextMessage("Hello ActiveMQ!");
				Thread.sleep(2);
				System.out.println("Message is sent!================"+i);
				// 通过消息生产者发出消息
				producer.send(message);
			}
			session.commit();
			session.close();
			connection.close();
		} catch (JMSException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
------------------------------------------
接受端：
package activeMQ;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnectionFactory;
public class TestServer {
	public static void main(String[] args) {
		try {
			//创建一个连接工厂
			String url="tcp://localhost:61616";
			ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(url);//ConnectionFactory connectionFactory=new ActiveMQConnectionFactory();这样写也可以的
			connectionFactory.setUserName("system");
			connectionFactory.setPassword("manager");
			Connection connection=connectionFactory.createConnection();
			connection.start();
			Session session=connection.createSession(Boolean.TRUE,Session.AUTO_ACKNOWLEDGE);
			Destination destination=  session.createQueue("my-queue");
			MessageConsumer consumer=session.createConsumer(destination);
			// 接收消息，参数：接收消息的超时时间，为0的话则不超时，receive返回下一个消息，但是超时了或者消费者被关闭，返回null
		    	Message message = consumer.receive(1000);
		    if (message instanceof TextMessage) {
		        TextMessage textMessage = (TextMessage) message;
		        String text = textMessage.getText();
		        System.out.println("Received: " + text);
		    } else {
		        System.out.println("Received: " + message);
		    }
			session.close();
			connection.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}



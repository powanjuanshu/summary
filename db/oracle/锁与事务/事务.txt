事务简介:
* 事务:就是一个完整的逻辑工作单元,有多个操作组成,所以操作要么全部成功,要么全部失败.
* 事务特点:ACID 原子性,一致性,隔离性,持久性
* 数据库事务:
  由多个SQL语句组成的一个逻辑工作单元,所以有SQL都必须同时执行成功,只要其中一个执行失败,则所有执行过的SQL自动全部回滚.

在oracle中commit,rollback,savepoint这三条语句可以完成基本的事务管理功能
* COMMIT - 提交并结束事务处理
* ROLLBACK - 撤销事务中已完成的工作
* SAVEPOINT - 标记事务中可以回滚点

ACID
指数据库事务正确执行的四个基本要素的缩写包含:原子性、一致性、隔离性、持久性.一个支持事务的数据库系统,
必需要具有这四种特性,否则在事务过程当中无法保证数据的正确性,交易过程极可能达不到交易方的要求. 

原子性(Atomicity)
* 整个事务中的所有操作,要么全部完成,要么全部不完成,不可能停滞在中间某个环节.事务在执行过程中发生错误,会被回滚到事务开始前的状态,
  就像这个事务从来没有执行过一样.这种事务原子保证了现实生活很多业务现象的合理.例如：银行存款,如果确定成功存入,数据库必须完整修改.
  如果存入失败,数据库必须完全回滚.不能在数据库只存一半或回滚一半.

一致性(Consistency)
* 在事务开始之前和事务结束以后,数据库的完整性约束没有被破坏.插入一张表数据,会影响其它(索引/其它表)等一致.
  一个事务执行前和执行后在数据库必须保证一致状态;例如：表a和表b有主外键约束,更新a,级联b值需要保持一致性更新.

隔离性(Isolation)
* 两个事务的执行是互不干扰的,一个事务不可能看到其他事务运行时,中间某一时刻的数据.
  事务的隔离有4个级别(read Uncommitted,read committed,rapeatable read,可串行)数据库为了防止出现数据库读取不一致,可设置不同等级的事务的隔离性

持久性(Durability)
* 在事务完成以后,该事务所对数据库所作的更改便持久的保存在数据库之中,并不会被回滚.

由于一项操作通常会包含许多子操作,而这些子操作可能会因为硬件的损坏或其他因素产生问题,要正确实现ACID并不容易.ACID建议数据库将所有需要更新以及修改的资料一次操作完毕,
但实际上并不可行.

目前主要有两种方式实现ACID:第一种是Write ahead logging,就是日志式的方式.第二种是Shadow paging.

著名 CAP理论：在分布式数据库应用中，任何分布式系统只可同时满足CAP其中两点，无法三者兼顾。
Consistency(一致性), 数据一致更新，所有数据变动都是同步的。
Availability(可用性), 好的响应性能。
Partition tolerance(分区容错性) 可靠性。
CA 系统是要求高可用用并且实时一致性。单点数据库是符合这种架构的，例如超市收银系统，图书管理系统。
 
AP 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。例如博客系统。
CP 系统是要求满足一致性，分区容忍性，通常性能不是特别高。例如火车售票系统。 
忠告：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。 
 
3、 最终一致性的系统是符合AP理论架构，对可用和分区容错要求较高，对数据实时一致要求较低。网络论坛或weibo的系统架构都符合最终一致性的应用。 
4、数据库中间件服务时是对分布式数据库的一个管理系统，其中负载均衡和扩展性相对来说是它的核心所在。 


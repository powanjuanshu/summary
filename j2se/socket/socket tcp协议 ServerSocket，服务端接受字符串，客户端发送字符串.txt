TalkClient.java:
package com.socket;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
public class TalkClient {
	public static void main(String args[]) throws Exception {
		System.out.println("客户端");
		Socket socket=new Socket("192.168.0.100", 4700);//向本机的4700端口发出客户请求
		PrintWriter os=new PrintWriter(socket.getOutputStream());//由Socket对象得到输出流，并构造PrintWriter对象
		BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));//由Socket对象输入流，并构造BufferReader对象
		os.println("jack");//将字符串输出到Server
		os.flush();//刷新输出流，使Server马上收到该字符串
		System.out.println("服务端传来的密码："+is.readLine());
		os.close();//关闭Socket输出流
		is.close();//关闭Socket输入流
		socket.close();//关闭Socket
	}
}
-----------
TalkServer.java:
package com.socket;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
public class TalkServer {
	public static void main(String args[]) throws Exception {
		System.out.println("服务端");
		ServerSocket server=new ServerSocket(4700);//创建一个ServerSocket在端口4700监听客户请求
		Socket socket=server.accept();//使用accept()阻塞等待客户请求，有客户请求到来则产生一个Socket对象，并继续执行
		BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));//由Socket对象得到输入流，并构造相应的BufferedReader对象
		PrintWriter os=new PrintWriter(socket.getOutputStream());//由Socket对象得到输出流，并构造PrintWriter对象
		System.out.println("客户端传来的用户名:" + is.readLine());//打出从客户端传来的字符串
		os.println("861002");//向客户端输出该字符串,os.write也可以吧？
		os.flush();//刷新输出流，使Client马上收到该字符串
		os.close();//关闭Socket输出流
		is.close();//关闭Socket输入流
		socket.close();//关闭Socket
		server.close();//关闭ServerSocket
	}
}

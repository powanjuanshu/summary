<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<title>Java finally语句到底是在return之前还是之后执行？ - Alexia(minmin) - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=k2uL13BZlYpYjZ7FITMnMaB1mOfAPcMGfJChBRaBpP01"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/ThinkInside/bundle-ThinkInside.css?v=AYJ3JDrlkHMNaZ98AwsNMYonaCnbUkGPNd4ch-B6S_Q1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/113759.css?v=J6E0RD2BOpCva7hjOtaLLMoYNrE%3d"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/lanxuezaipiao/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/lanxuezaipiao/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/lanxuezaipiao/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'lanxuezaipiao', cb_enable_mathjax=true;</script>
<script src="/bundles/blog-common.js?v=Pbt4uMm_qWARxxiPM8vQwX0Bh-yg-NcQxX73-xkOCnw1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<a href="https://github.com/lanxuezaipiao"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://github-camo.global.ssl.fastly.net/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>
<!--PageBeginHtml Block End-->

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/lanxuezaipiao/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/lanxuezaipiao/">程序媛想事儿（Alexia）</a></h1>
<h2>在现实的社会中还想追求小幸福的那个傻菇凉...</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/lanxuezaipiao/">首页</a></li>
<li><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/Alexia(minmin)">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/lanxuezaipiao/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/lanxuezaipiao/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 101&nbsp;
文章- 0&nbsp;
评论- 671&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/lanxuezaipiao/p/3440471.html">Java finally语句到底是在return之前还是之后执行？</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><span style="font-size: 14px;">网上有很多人探讨Java中异常捕获机制try...catch...finally块中的finally语句是不是一定会被执行？很多人都说不是，当然他们的回答是正确的，经过我试验，<strong><span style="color: #330033;">至少有两种情况下finally语句是不会被执行的：</span></strong></span></p>
<p><strong><span style="font-size: 14px; color: #330033;">（1）try语句没有被执行到，如在try语句之前就返回了，这样finally语句就不会执行，这也说明了finally语句被执行的必要而非充分条件是：相应的try语句一定被执行到。</span></strong></p>
<p><strong><span style="font-size: 14px; color: #330033;">（2）在try块中有System.exit(0);这样的语句，System.exit(0);是终止Java虚拟机JVM的，连JVM都停止了，所有都结束了，当然finally语句也不会被执行到。</span></strong></p>
<p><span style="font-size: 14px;"><br />
</span></p>
<p><span style="font-size: 14px;">当然还有很多人探讨Finally语句的执行与return的关系，颇为让人迷惑，不知道finally语句是在try的return之前执行还是之后执行？我也是一头雾水，我觉得他们的说法都不正确，我觉得应该是：<strong><span style="color: #cc0000;">finally语句是在try的return语句执行之后，return返回之前执行</span></strong>。这样的说法有点矛盾，也许是我表述不太清楚，下面我给出自己试验的一些结果和示例进行佐证，有什么问题欢迎大家提出来。</span></p>
<h1><strong><span style="font-size: 14px;">1. finally语句在return语句执行之后return返回之前执行的。</span></strong></h1>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest1 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        
        System.out.println(test1());
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> test1() {
        </span><span style="color: #0000ff;">int</span> b = 20<span style="color: #000000;">;

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">return</span> b += 80<span style="color: #000000;">; 
        }
        </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {

            System.out.println(</span>"catch block"<span style="color: #000000;">);
        }
        </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            
            System.out.println(</span>"finally block"<span style="color: #000000;">);
            
            </span><span style="color: #0000ff;">if</span> (b &gt; 25<span style="color: #000000;">) {
                System.out.println(</span>"b&gt;25, b = " +<span style="color: #000000;"> b);
            }
        }
        
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> b;
    }
    
}</span></pre>
</div>
<p><span style="font-size: 14px;"> 运行结果是：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
b</span>&gt;25, b = 100
100</pre>
</div>
<p><span style="font-size: 14px;">说明return语句已经执行了再去执行finally语句，不过并没有直接返回，而是等finally语句执行完了再返回结果。</span></p>
<p><span style="font-size: 14px;">如果觉得这个例子还不足以说明这个情况的话，下面再加个例子加强证明结论：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest1 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        
        System.out.println(test11());
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String test11() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);

           </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> test12();
      } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
           System.out.println(</span>"finally block"<span style="color: #000000;">);
       }
  }

  </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> String test12() {
       System.out.println(</span>"return statement"<span style="color: #000000;">);

       </span><span style="color: #0000ff;">return</span> "after return"<span style="color: #000000;">;
   }
    
}</span></pre>
</div>
<p><span style="font-size: 14px;"> 运行结果为：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">return</span><span style="color: #000000;"> statement
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
after </span><span style="color: #0000ff;">return</span></pre>
</div>
<p><span style="font-size: 14px;"> 说明try中的return语句先执行了但并没有立即返回，等到finally执行结束后再<br />
</span></p>
<p><span style="font-size: 14px;">这里大家可能会想：如果finally里也有return语句，那么是不是就直接返回了，try中的return就不能返回了？看下面。</span></p>
<h1><strong><span style="font-size: 14px;">2. finally块中的return语句会覆盖try块中的return返回。</span></strong></h1>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest2 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        System.out.println(test2());
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> test2() {
        </span><span style="color: #0000ff;">int</span> b = 20<span style="color: #000000;">;

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">return</span> b += 80<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {

            System.out.println(</span>"catch block"<span style="color: #000000;">);
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {

            System.out.println(</span>"finally block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">if</span> (b &gt; 25<span style="color: #000000;">) {
                System.out.println(</span>"b&gt;25, b = " +<span style="color: #000000;"> b);
            }

            </span><span style="color: #0000ff;">return</span> 200<span style="color: #000000;">;
        }

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> return b;</span>
<span style="color: #000000;">    }

}</span></pre>
</div>
<p><span style="font-size: 14px;"> 运行结果是：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
b</span>&gt;25, b = 100
200</pre>
</div>
<p><span style="font-size: 14px;"> 这说明finally里的return直接返回了，就不管try中是否还有返回语句，这里还有个小细节需要注意，finally里加上return过后，finally外面的return b就变成不可到达语句了，也就是永远不能被执行到，所以需要注释掉否则编译器报错。</span></p>
<p><span style="font-size: 14px;">这里大家可能又想：如果finally里没有return语句，但修改了b的值，那么try中return返回的是修改后的值还是原值？看下面。</span></p>
<h1><strong><span style="font-size: 14px;">3. 如果finally语句中没有return语句覆盖返回值，那么原来的返回值可能因为finally里的修改而改变也可能不变。</span></strong></h1>
<p><strong><span style="font-size: 14px;">测试用例1：</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest3 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        System.out.println(test3());
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> test3() {
        </span><span style="color: #0000ff;">int</span> b = 20<span style="color: #000000;">;

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">return</span> b += 80<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {

            System.out.println(</span>"catch block"<span style="color: #000000;">);
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {

            System.out.println(</span>"finally block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">if</span> (b &gt; 25<span style="color: #000000;">) {
                System.out.println(</span>"b&gt;25, b = " +<span style="color: #000000;"> b);
            }

            b </span>= 150<span style="color: #000000;">;
        }

        </span><span style="color: #0000ff;">return</span> 2000<span style="color: #000000;">;
    }

}</span></pre>
</div>
<p><span style="font-size: 14px;"> 运行结果是：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
b</span>&gt;25, b = 100
100</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 14px;"><strong><span style="font-size: 14px;">测试用例2：</span></strong></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">import</span> java.util.*<span style="color: #000000;">;

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest6
{
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        System.out.println(getMap().get(</span>"KEY"<span style="color: #000000;">).toString());
    }
     
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> Map&lt;String, String&gt;<span style="color: #000000;"> getMap() {
        Map</span>&lt;String, String&gt; map = <span style="color: #0000ff;">new</span> HashMap&lt;String, String&gt;<span style="color: #000000;">();
        map.put(</span>"KEY", "INIT"<span style="color: #000000;">);
         
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            map.put(</span>"KEY", "TRY"<span style="color: #000000;">);
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> map;
        }
        </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
            map.put(</span>"KEY", "CATCH"<span style="color: #000000;">);
        }
        </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            map.put(</span>"KEY", "FINALLY"<span style="color: #000000;">);
            map </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
        }
         
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> map;
    }
}</span></pre>
</div>
<p>运行结果是：</p>
<pre>FINALLY</pre>
<p><span style="font-size: 14px;">为什么测试用例1中finally里的b = 150;并没有起到作用而测试用例2中finally的<span style="color: #000000;">map.put(</span>"KEY", "FINALLY"<span style="color: #000000;">);</span>起了作用而<span style="color: #000000;">map </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;</span>却没起作用呢？这就是Java到底是传值还是传址的问题了，具体请看<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/lanxuezaipiao/p/3371224.html">精选30道Java笔试题解答</a>，里面有详细的解答，简单来说就是：Java中只有传值没有传址，这也是为什么map = null这句不起作用。这同时也说明了返回语句是try中的return语句而不是 finally外面的return b;这句，不相信的话可以试下，将return b;改为return 294，对原来的结果没有一点影响。</span></p>
<p><span style="font-size: 14px;">这里大家可能又要想：是不是每次返回的一定是try中的return语句呢？那么finally外的return b不是一点作用没吗？请看下面。</span></p>
<h1><strong><span style="font-size: 14px;">4. try块里的return语句在异常的情况下不会被执行，这样具体返回哪个看情况。</span></strong></h1>
<div class="dp-highlighter bg_java">
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest4 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        System.out.println(test4());
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> test4() {
        </span><span style="color: #0000ff;">int</span> b = 20<span style="color: #000000;">;

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);

            b </span>= b / 0<span style="color: #000000;">;

            </span><span style="color: #0000ff;">return</span> b += 80<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {

            b </span>+= 15<span style="color: #000000;">;
            System.out.println(</span>"catch block"<span style="color: #000000;">);
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {

            System.out.println(</span>"finally block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">if</span> (b &gt; 25<span style="color: #000000;">) {
                System.out.println(</span>"b&gt;25, b = " +<span style="color: #000000;"> b);
            }

            b </span>+= 50<span style="color: #000000;">;
        }

        </span><span style="color: #0000ff;">return</span> 204<span style="color: #000000;">;
    }

}</span></pre>
</div>
</div>
<p><span style="font-size: 14px;"> 运行结果是：</span></p>
<div class="dp-highlighter bg_java">
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
b</span>&gt;25, b = 35
85</pre>
</div>
<span style="font-size: medium;">这里因 为在return之前发生了除0异常，所以try中的return不会被执行到，而是接着执行捕获异常的catch 语句和最终的finally语句，此时两者对b的修改都影响了最终的返回值，这时return b;就起到作用了。当然如果你这里将return b改为return 300什么的，最后返回的就是300，这毋庸置疑。<br /></span>
<p><span style="font-size: medium;">这里大家可能又有疑问：如果catch中有return语句呢？当然只有在异常的情况下才有可能会执行，那么是在finally之前就返回吗？看下面。</span></p>
</div>
<h1><span style="font-size: 14px;"><span style="font-size: 14px;">5. 当发生异常后，catch中的return执行情况与未发生异常时try中return的执行情况完全一样。</span></span></h1>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FinallyTest5 {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        System.out.println(test5());
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> test5() {
        </span><span style="color: #0000ff;">int</span> b = 20<span style="color: #000000;">;

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            System.out.println(</span>"try block"<span style="color: #000000;">);
            
            b </span>= b /0<span style="color: #000000;">;

            </span><span style="color: #0000ff;">return</span> b += 80<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {

            System.out.println(</span>"catch block"<span style="color: #000000;">);
            </span><span style="color: #0000ff;">return</span> b += 15<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {

            System.out.println(</span>"finally block"<span style="color: #000000;">);

            </span><span style="color: #0000ff;">if</span> (b &gt; 25<span style="color: #000000;">) {
                System.out.println(</span>"b&gt;25, b = " +<span style="color: #000000;"> b);
            }

            b </span>+= 50<span style="color: #000000;">;
        }

        </span><span style="color: #008000;">//</span><span style="color: #008000;">return b;</span>
<span style="color: #000000;">    }

}</span></pre>
</div>
<p><span style="font-size: 14px;"> 运行结果如下：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">try</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> block
</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> block
b</span>&gt;25, b = 35
35</pre>
</div>
<p><span style="font-size: 14px;"> 说明了发生异常后，catch中的return语句先执行，确定了返回值后再去执行finally块，执行完了catch再返回，finally里对b的改变对返回值无影响，原因同前面一样，也就是说情况与try中的return语句执行完全一样。</span></p>
<p><span style="font-size: 14px;"><br />
</span></p>
<p><span style="font-size: 14px;"><span style="color: #cc0000;"><strong>最后总结：finally块的语句在try或catch中的return语句执行之后返回之前执行且finally里的修改语句可能影响也可能不影响try或catch中
return已经确定的返回值，若finally里也有return语句则覆盖try或catch中的return语句直接返回。</strong></span></span></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2013-11-24 21:06</span> <a href='http://www.cnblogs.com/lanxuezaipiao/'>Alexia(minmin)</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=3440471" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3440471);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=113759,cb_entryId=3440471,cb_blogApp=currentBlogApp,cb_blogUserGuid='edc6b140-ec73-e111-aa3f-842b2b196315',cb_entryCreatedDate='2013/11/24 21:06:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
</script>
<script type='text/javascript'>
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1410860226396-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block">
<div id='div-gpt-ad-1410860226396-0' style='width:468px; height:60px;'>
<script type='text/javascript'>
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1410860226396-0'); });
    } else {
        $('#div-gpt-ad-1346480159711-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2014 Alexia(minmin)
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<script type="text/javascript">
    var wumiiSitePrefix = "http://www.cnblogs.com/lanxuezaipiao/";
    var wumiiParams = "&num=5&mode=3&pf=CNBLOGS";
</script>
<script type="text/javascript" src="http://widget.wumii.cn/ext/relatedItemsWidget"></script>
<a href="http://www.wumii.com/widget/relatedItems" style="border:0;">
    <img src="http://static.wumii.cn/images/pixel.png" alt="无觅关联推荐，快速提升流量" style="border:0;padding:0;margin:0;" />
</a>



<!--评论，生成气泡效果标签代码-->
<script type="text/javascript" language="javascript"> 
    $(document).ready(function() {
        var commentTime = setInterval(function(){if($("#comments_pager_bottom").length>0){CommentBubble();clearTimeout(commentTime);}},50);
    }); 
    function CommentBubble()
    {
var w1 = '<div class="list">' +
        '<table class="out" border="0" cellspacing="0" cellpadding="0"> ' +
            '<tr>' +
                '<td class="icontd" align="right" valign="bottom">' +
                    '<img src="http://images.cnblogs.com/cnblogs_com/lanxuezaipiao/533599/o_%E5%A4%B4%E5%83%8F.png" width="56px" height="57px"/>' +
                '</td>' +
                '<td align="left" valign="bottom" class="q">' +
                    '<table border="0" cellpadding="0" cellspacing="0" style=""> ' +
                        '<tr><td class="topleft"></td><td class="top"></td><td class="topright"></td></tr> ' +
                        '<tr><td class="left"></td> <td align="left" class="conmts"><p>';
 
 
        var w2 = '</p> </td> <td class="right"></td></tr> ' +
                        '<tr><td class="bottomleft"></td><td class="bottom"></td><td class="bottomright"></td></tr> ' +
                    '</table>' +
                '</td> ' +
            '</tr> ' +
        '</table> ' +
    '</div>';
 
        $.each($(".blog_comment_body"), function(i, t) {
            $(t).html(w1 + $(t).html() + w2);
        });
$(".louzhu").closest(".feedbackItem").find(".out").removeClass("out").addClass("inc");
        /*.find(".q").attr("align","right");*/
        }
</script>
<!--PageEndHtml Block End-->
</body>
</html>

package com.bestpay;

import com.google.common.util.concurrent.AbstractIdleService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Bootstrap extends AbstractIdleService {

    private final static Logger log = LoggerFactory.getLogger(Bootstrap.class);

    private ClassPathXmlApplicationContext context;

    // main方法，入口，主线程
    public static void main(String[] args) throws Exception {
        Bootstrap bootstrap = new Bootstrap();
        bootstrap.startAsync(); // 当调用AbstractIdleService的此方法的时候，则开启一个线程去执行下面的startUp方法
        try {
            Object lock = new Object();
            synchronized (lock) {
                while (true) {
                    lock.wait(); // 让主程序在这里挂起
                }
            }
        } catch (InterruptedException ex) {
            log.error("ignore interruption");
        }
        bootstrap.stopAsync(); // 当调用AbstractIdleService的此方法的时候，则开启一个线程去执行下面的shutDown方法
    }
    // 开了一个新的线程
    @Override
    protected void startUp() throws Exception {
    	System.out.println("aaa");
        context = new ClassPathXmlApplicationContext(new String[] {"spring/spring-context.xml"});
        context.start();
        log.info("persistence service started successfully");
    }
    // 开了一个新的线程
    @Override
    protected void shutDown() throws Exception {
        context.stop();
        log.info("service stopped successfully");
    }
}

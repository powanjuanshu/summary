package com.bestpay.paycenter.entry.http.cache;

import com.google.common.cache.*;

import java.awt.print.Book;
import java.util.concurrent.TimeUnit;

/**
 * User: hum_jacky
 * Date: 14-5-12
 * Time: 上午11:14
 */
public class Main3 {
    public static void main(String[] args) throws Exception {
        CacheBuilder<String, Book> cacheBuilder=CacheBuilder.newBuilder().expireAfterAccess(8, TimeUnit.SECONDS).maximumSize(1).removalListener(new RemovalListener<String, Book>() {
            @Override
            public void onRemoval(RemovalNotification<String, Book> rn) {
                System.out.println(rn.getKey()+"被移除"+rn.getValue());
            }
        });
        LoadingCache<String, Book> cache=cacheBuilder.build(new CacheLoader<String, Book>() {
            @Override
            public Book load(String key) throws Exception {
                Book b=new Book();
                return b;
            }
        });
        Book book_1_0=cache.apply("book_1");//缓存book_1对象
        System.out.println(book_1_0);
        Book book_2_0=cache.apply("book_2");//因为maximumSize设为1,故不能同时缓存两个或两个以上的对象,所以必须先移除之前的缓存对象book_1 再缓存book_2对象
        System.out.println(book_2_0);
        Book book_1_1=cache.apply("book_1");//获取book_1 对象,如果存在则返回,否则创建新的对象,并将之缓存(book_2会被移除).
        System.out.println(book_1_1);

        Book book_2_1=cache.apply("book_2");
        System.out.println(book_2_1);
        Book book_2_1_=cache.apply("book_2");
        System.out.println(book_2_1_);

    }
}

java运行时异常与一般异常有何异同？

Throwable是所有Java程序中错误处理的父类,有两种资类:Error和Exception.

Error:表示由JVM所侦测到的无法预期的错误,由于这是属于JVM层次的严重错误,导致JVM无法继续执行,因此这是不可捕捉到的,无法采取任何恢复的操作,顶多只能显示错误信息.

Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情形.应用程序不应该抛出这种类型的对象(一般是由虚拟机抛出).
假如出现这种错误,除了尽力使程序安全退出外,在其他方面是无能为力的.

Exception:表示可恢复的例外,这是可捕捉到的.

Java提供了两类主要的异常:runtime exception和checked exception.

checked异常也就是我们经常遇到的IO异常,以及SQL异常都是这种异常.对于这种异常,JAVA编译器强制要求我们必须对这些异常进行catch.
所以面对这种异常不管我们是否愿意,只能自己去写一大堆catch块去处理可能的异常.这类异常一般是外部错误,例如试图从文件尾后读取数据等,
这并不是程序本身的错误,而是在应用环境中出现的外部错误.

但是另外一种异常:runtime exception,也称运行时异常,我们可以不处理.当出现这样的异常时,总是由虚拟机接管.
比如:我们从来没有人去处理过NullPointerException异常,它就是运行时异常,并且这种异常还是最常见的异常之一.

RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等.处理RuntimeException的原则是:假如出现RuntimeException那么一定是程序员的错误.
例如,可以通过检查数组下标和数组边界来避免数组越界访问异常.

出现运行时异常后,系统会把异常一直往上层抛,一直遇到处理代码.如果没有处理块,到最上层,如果是多线程就由Thread.run()抛出,如果是单线程就被main()抛出.
抛出之后,如果是线程,这个线程也就退出了.如果是主程序抛出的异常,那么这整个程序也就退出了.

运行时异常是Exception的子类,也有一般异常的特点,是可以被Catch块处理的.只不过往往我们不对他处理罢了.也就是说,
你如果不对运行时异常进行处理,那么出现运行时异常之后,要么是线程中止,要么是主程序终止.如果不想终止,则必须扑捉所有的运行时异常,决不让这个处理线程退出.
队列里面出现异常数据了,正常的处理应该是把异常数据舍弃,然后记录日志.不应该由于异常数据而影响下面对正常数据的处理.
在这个场景这样处理可能是一个比较好的应用,但并不代表在所有的场景你都应该如此.如果在其它场景,遇到了一些错误,如果退出程序比较好,
这时你就可以不太理会运行时异常,或者是通过对异常的处理显式的控制程序退出.异常处理的目标之一就是为了把程序从异常中恢复出来.


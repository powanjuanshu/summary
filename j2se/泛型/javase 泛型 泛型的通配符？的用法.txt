package com.abc;
import java.util.ArrayList;
import java.util.List;
public class Main {
	public static void main(String[] args) {
		List<String> ll = new ArrayList<String>();
		ll.add("abc");
		new Main().testGenericMethodDefine(ll);
		new Main().testGenericMethodDefine2(ll);
		
		String a = new String("1");
		String[] b = {"a" , "b"}; 
		write(a, b);
		/**
		        现在List<Object>, List<String>是两种不同的类型，
			他们之间没有继承关系，即使String继承了Object。下面的代码是非法的
    		List<String> ls = new ArrayList<String>();
    		List<Object> lo = ls;
			这样设计的原因在于，根据lo的声明，编译器允许你向lo中添加任意对象（例如Integer），但是此对象是
			List<String>，破坏了数据类型的完整性。
		 */
		List<String> d = add(new String("c")); // 泛型返回必须是List<String>,不能是 List<Object>,上面的注释部分已经解释原因
		System.out.println(d);
		
		List<String> e = add2 (new String("e"), new Integer(1));
		
	}
	public static <T> void write (T t, T[] ia) { // 方法的泛型,在返回类型前必须加上<T>,而且位置必须在返回类型的前面,不然不符合语法报错
		System.out.println(t);
		System.out.println(ia[1]);
	}
	public static <T>List<T> add (T bean) { // 这里的方法里面的T表示传进的T泛型的参数,第一个<T>是和方法参数里面的T一起的,语法规定的,可以隔开写public static <T> List<T> add (T bean).第二个List<T>表示这个方法返回的也是T泛型的集合.
		System.out.println(bean);
		List<T> l = new ArrayList<T>();
		l.add(bean);
		return l;
	}
	public static <T, K> List<T> add2 (T bean, K bean2) { // 多个泛型的运用
		System.out.println(bean);
		List<T> l = new ArrayList<T>();
		l.add(bean);
		return l;
	}
	/**
	 public <T, S extends T> T testGenericMethodDefine(T t, S s){
     	...
 	 }
 	   注意：定义带类型参数的方法，其主要目的是为了表达多个参数以及返回值之间的关系。例如上面中T和S的继承关系，
 	    返回值的类型和第一个类型参数的值相同。
 	   如果仅仅是想实现多态，请优先使用通配符解决。通配符的内容见下面章节。
 	 public <T> void testGenericMethodDefine2(List<T> s){
     	...
 	 }
 	   应改为
 	 public void testGenericMethodDefine2(List<?> s){
     	...
 	 }
	 */
	public <T> void testGenericMethodDefine2 (List<T> s) { // 和testGenericMethodDefine一样,推荐下面,不推荐这个
		System.out.println("testGenericMethodDefine2:"+s);
	}
	public void testGenericMethodDefine (List<?> s) { // 和testGenericMethodDefine2一样,推荐这个,不推荐上面
		System.out.println("testGenericMethodDefine:"+s);
	}
	
}

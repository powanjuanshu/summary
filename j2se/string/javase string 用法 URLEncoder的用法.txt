package com;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
public class Tp {
	public static void main(String[] args) throws UnsupportedEncodingException {
		String gg = URLEncoder.encode("刘志猛博客", "utf-8");
		System.out.println("加密效果+++++++" + gg);
		System.out.println(URLDecoder.decode("解密效果+++++++" + gg, "utf-8"));
	}
}
---------------------------
大家在用GOOGLE和百度时,不知道发现没有,它们的地址后面有%E5%88%98%E5%BF%9这些字符没有
其实就是对参数进行了加密.
在进行URL参数传递的时候不可避免会存在中文参数，并且这个中文参数经常会出现乱码的情况，大家可以看到谷歌或者百度搜索的参数已经进行了编码，也就是说他不是直接将中文条件去作为条件的。
其实我们平时使用中为了避免产生URL中文乱码问题，可以采用转码机制。
现在我们介绍下URLEncoder用法:
如:liserch/serch/Serch.action?serch=刘志猛博客
然后用java.net.URLEncoder.encode进行转换
liserch/serch/Serch.action?serch=<%=java.net.URLEncoder.encode("刘志猛博客",  "utf-8")%>
就会得到好下这样格式
liserch/serch/Serch.action?serch=%E5%88%98
呵呵,是不是得到我们想要的结果了?这就是加密.下次是解密
在你提交的ACTION 进行处理
String code= java.net.URLDecoder.decode(serch,   "utf-8");  
这样就可以得到中文字符了
现在给一段代码直接写个测试类
       String s ="刘志猛博客";
       String gg =URLEncoder.encode("刘志猛博客","utf-8");
       System.out.println("加密效果+++++++"+gg);
       System.out.println(URLDecoder.decode("解密效果+++++++"+gg,"utf-8"));

URLEncoder相关知识
对 String 编码时，使用以下规则： 
字母数字字符 "a" 到 "z"、"A" 到 "Z" 和 "0" 到 "9" 保持不变。 
特殊字符 "."、"-"、"*" 和 "_" 保持不变。 
空格字符 " " 转换为一个加号 "+"。 
所有其他字符都是不安全的，因此首先使用一些编码机制将它们转换为一个或多个字节。然后每个字节用一个包含 3 个字符的字符串 "%xy" 表示，其中 xy 为该字节的两位十六进制表示形式。推荐的编码机制是 UTF-8。但是，出于兼容性考虑，如果未指定一种编码，则使用相应平台的默认编码。 
例如，使用 UTF-8 编码机制，字符串 "The string ü@foo-bar" 将转换为 "The+string+%C3%BC%40foo-bar"，因为在 UTF-8 中，字符 ü 编码为两个字节，C3 （十六进制）和 BC （十六进制），字符 @ 编码为一个字节 40 （十六进制）。
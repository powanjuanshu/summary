package com.iflytek.integralmarket.vo;
public class Main {
	public static void main(String[] args) throws InterruptedException {

		final The2 t = new The2();
		new Thread(new Runnable() {
			@Override
			public void run() {
				t.vm(); 
			}
		}).start();
		
		final The2 t3 = new The2();
		new Thread(new Runnable() {
			@Override
			public void run() {
				t3.vm(); 
			}
		}).start();
		
		
	}
}

package com.iflytek.integralmarket.vo;
public class The2 {
	private static final Object obj = new Object();
	public  void vm() {
		try {
			synchronized (obj) {//也可以锁类的class是唯一的:synchronized (The2.class)
				System.out.println(obj);
				System.out.println("hahaha:"+Thread.currentThread().getName());
				System.out.println("lock1");
				System.out.println("lock2");
				System.out.println("lock3");
				Thread.sleep(10*1000);
				System.out.println("lock4");
				System.out.println("lock5");
				System.out.println("lock6");
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
--------------------------------
package com.iflytek.integralmarket.vo;
public class Main {
	public static void main(String[] args) throws InterruptedException {

		final The2 t = new The2();
		new Thread(new Runnable() {
			@Override
			public void run() {
				t.vm(); 
			}
		}).start();
		new Thread(new Runnable() {
			@Override
			public void run() {
				t.vm(); 
			}
		}).start();
		
		
	}
}

package com.iflytek.integralmarket.vo;
public class The2 {
	public synchronized void vm() {//定义在方法上是锁住当前调用的对象
		try {
			System.out.println(this);
			System.out.println("hahaha:"+Thread.currentThread().getName());
			System.out.println("lock1");
			System.out.println("lock2");
			System.out.println("lock3");
			Thread.sleep(10*1000);
			System.out.println("lock4");
			System.out.println("lock5");
			System.out.println("lock6");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
--------------------------------
在使用synchronized关键字时有以下四点需要注意：
1.  synchronized关键字不能继承。
2.  在定义接口方法时不能使用synchronized关键字。
3.  构造方法不能使用synchronized关键字，但可以使用synchronized块来进行同步。(推建)
4.  synchronized可以自由放置。
5.  synchronized关键字只能用来同步方法，不能用来同步类变量。
6.  synchronized关键字要尽量少用，因为无论是静态或非静态方法，都会影响其它同类synchronized方法的执行，但静态或非静态互不干扰。大量使用这种同步方式会使程序的性能大幅度下降
7.  非静态方法可以使用this来同步，而静态方法必须使用Class对象来同步
8.  可以使是内部String变量来同步，但必需保证String的值是不变的，所以定义这样：private final static String sync = ""；//final 只能在定义时初始化变量，所以保证了唯一性

sychronized关键字只和一个对象实例绑定
class Test{
     public synchronized void method(){  
         
     }
}

public class Sync implements Runnable{  
     private Test test;  
     public void run(){  
          test.method();  
     }  
     public Sync(Test test){  
         this.test = test;  
     }  
     public static void main(String[] args) throws Exception{  
         Test test1 =  new Test();  
         Test test2 =  new Test();  
         Sync sync1 = new Sync(test1);  
         Sync sync2 = new Sync(test2);  
         new Thread(sync1).start();  
         new Thread(sync2).start();   
     }  
 } 
在Test类中的method方法是同步的。但上面的代码建立了两个Test类的实例，因此，test1和test2的method方法是分别执行的。要想让method同步，必须在建立Sync类的实例时向它的构造方法中传入同一个Test类的实例，如下面的代码所示：
Sync sync1 = new Sync(test1);     

不仅可以使用synchronized来同步非静态方法，也可以使用synchronized来同步静态方法。如可以按如下方式来定义method方法：
class Test{  
    public static synchronized void method() {  
    	
    }  
}

建立Test类的对象实例如下：
Test test = new Test(); 
对于静态方法来说，只要加上了synchronized关键字，这个方法就是同步的，无论是使用test.method()，还是使用Test.method()来调用method方法，method都是同步的，并不存在非静态方法的多个实例的问题。
在23种设计模式中的单件（Singleton）模式如果按传统的方法设计，也是线程不安全的。

/* 如果在非静态方法method1和method2定义时都使用了synchronized，
 * 在method1未执行完之前，method2是不能执行的。
 * 静态方法和非静态方法的情况类似。但静态和非静态方法不会互相影响
 */
public class MyThread1 extends Thread { 
    public String methodName;
    public static void method(String s) {
        System.out.println(s);
        while (true)
            try {
                sleep(5);//适当的使用sleep会提高系统资源利用率, 否则cpu可能100%
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
    }
    public synchronized void method1(){
        method("非静态的method1方法"); 
    }
    public synchronized void method2(){
        method("非静态的method2方法"); 
    }
    public static synchronized void method3(){
        method("静态的method3方法"); 
    }
    public static synchronized void method4(){
        method("静态的method4方法"); 
    }
    public void run(){
        try{
            this.getClass().getMethod(methodName).invoke(this); 
        }
        catch (Exception e){
        } 
    } 
    public static void main(String[] args) throws Exception{ 
        MyThread1 myThread1 = new MyThread1(); 
        for (int i = 1; i <= 4; i++) {
            myThread1.methodName = "method" + String.valueOf(i); 
            new Thread(myThread1).start(); 
            sleep(100); 
        } 
    } 
}
运行结果如下：
非静态的method1方法
静态的method3方法
从上面的运行结果可以看出，method2和method4在method1和method3未结束之前不能运行。因此，我们可以得出一个结论，如果在类中使用synchronized关键字来定义非静态方法，那将影响这个中的所有使用synchronized关键字定义的非静态方法。
如果定义的是静态方法，那么将影响类中所有使用synchronized关键字定义的静态方法。这有点象数据表中的表锁，当修改一条记录时，系统就将整个表都锁住了， 因此，大量使用这种同步方式会使程序的性能大幅度下降。




















